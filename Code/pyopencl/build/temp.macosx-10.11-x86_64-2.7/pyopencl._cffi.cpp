#define _CFFI_

/* We try to define Py_LIMITED_API before including Python.h.

   Mess: we can only define it if Py_DEBUG, Py_TRACE_REFS and
   Py_REF_DEBUG are not defined.  This is a best-effort approximation:
   we can learn about Py_DEBUG from pyconfig.h, but it is unclear if
   the same works for the other two macros.  Py_DEBUG implies them,
   but not the other way around.
*/
#ifndef _CFFI_USE_EMBEDDING
#  include <pyconfig.h>
#  if !defined(Py_DEBUG) && !defined(Py_TRACE_REFS) && !defined(Py_REF_DEBUG)
#    define Py_LIMITED_API
#  endif
#endif

#include <Python.h>
#ifdef __cplusplus
extern "C" {
#endif
#include <stddef.h>

/* This part is from file 'cffi/parse_c_type.h'.  It is copied at the
   beginning of C sources generated by CFFI's ffi.set_source(). */

typedef void *_cffi_opcode_t;

#define _CFFI_OP(opcode, arg)   (_cffi_opcode_t)(opcode | (((uintptr_t)(arg)) << 8))
#define _CFFI_GETOP(cffi_opcode)    ((unsigned char)(uintptr_t)cffi_opcode)
#define _CFFI_GETARG(cffi_opcode)   (((intptr_t)cffi_opcode) >> 8)

#define _CFFI_OP_PRIMITIVE       1
#define _CFFI_OP_POINTER         3
#define _CFFI_OP_ARRAY           5
#define _CFFI_OP_OPEN_ARRAY      7
#define _CFFI_OP_STRUCT_UNION    9
#define _CFFI_OP_ENUM           11
#define _CFFI_OP_FUNCTION       13
#define _CFFI_OP_FUNCTION_END   15
#define _CFFI_OP_NOOP           17
#define _CFFI_OP_BITFIELD       19
#define _CFFI_OP_TYPENAME       21
#define _CFFI_OP_CPYTHON_BLTN_V 23   // varargs
#define _CFFI_OP_CPYTHON_BLTN_N 25   // noargs
#define _CFFI_OP_CPYTHON_BLTN_O 27   // O  (i.e. a single arg)
#define _CFFI_OP_CONSTANT       29
#define _CFFI_OP_CONSTANT_INT   31
#define _CFFI_OP_GLOBAL_VAR     33
#define _CFFI_OP_DLOPEN_FUNC    35
#define _CFFI_OP_DLOPEN_CONST   37
#define _CFFI_OP_GLOBAL_VAR_F   39
#define _CFFI_OP_EXTERN_PYTHON  41

#define _CFFI_PRIM_VOID          0
#define _CFFI_PRIM_BOOL          1
#define _CFFI_PRIM_CHAR          2
#define _CFFI_PRIM_SCHAR         3
#define _CFFI_PRIM_UCHAR         4
#define _CFFI_PRIM_SHORT         5
#define _CFFI_PRIM_USHORT        6
#define _CFFI_PRIM_INT           7
#define _CFFI_PRIM_UINT          8
#define _CFFI_PRIM_LONG          9
#define _CFFI_PRIM_ULONG        10
#define _CFFI_PRIM_LONGLONG     11
#define _CFFI_PRIM_ULONGLONG    12
#define _CFFI_PRIM_FLOAT        13
#define _CFFI_PRIM_DOUBLE       14
#define _CFFI_PRIM_LONGDOUBLE   15

#define _CFFI_PRIM_WCHAR        16
#define _CFFI_PRIM_INT8         17
#define _CFFI_PRIM_UINT8        18
#define _CFFI_PRIM_INT16        19
#define _CFFI_PRIM_UINT16       20
#define _CFFI_PRIM_INT32        21
#define _CFFI_PRIM_UINT32       22
#define _CFFI_PRIM_INT64        23
#define _CFFI_PRIM_UINT64       24
#define _CFFI_PRIM_INTPTR       25
#define _CFFI_PRIM_UINTPTR      26
#define _CFFI_PRIM_PTRDIFF      27
#define _CFFI_PRIM_SIZE         28
#define _CFFI_PRIM_SSIZE        29
#define _CFFI_PRIM_INT_LEAST8   30
#define _CFFI_PRIM_UINT_LEAST8  31
#define _CFFI_PRIM_INT_LEAST16  32
#define _CFFI_PRIM_UINT_LEAST16 33
#define _CFFI_PRIM_INT_LEAST32  34
#define _CFFI_PRIM_UINT_LEAST32 35
#define _CFFI_PRIM_INT_LEAST64  36
#define _CFFI_PRIM_UINT_LEAST64 37
#define _CFFI_PRIM_INT_FAST8    38
#define _CFFI_PRIM_UINT_FAST8   39
#define _CFFI_PRIM_INT_FAST16   40
#define _CFFI_PRIM_UINT_FAST16  41
#define _CFFI_PRIM_INT_FAST32   42
#define _CFFI_PRIM_UINT_FAST32  43
#define _CFFI_PRIM_INT_FAST64   44
#define _CFFI_PRIM_UINT_FAST64  45
#define _CFFI_PRIM_INTMAX       46
#define _CFFI_PRIM_UINTMAX      47

#define _CFFI__NUM_PRIM         48
#define _CFFI__UNKNOWN_PRIM           (-1)
#define _CFFI__UNKNOWN_FLOAT_PRIM     (-2)
#define _CFFI__UNKNOWN_LONG_DOUBLE    (-3)

#define _CFFI__IO_FILE_STRUCT         (-1)


struct _cffi_global_s {
    const char *name;
    void *address;
    _cffi_opcode_t type_op;
    void *size_or_direct_fn;  // OP_GLOBAL_VAR: size, or 0 if unknown
                              // OP_CPYTHON_BLTN_*: addr of direct function
};

struct _cffi_getconst_s {
    unsigned long long value;
    const struct _cffi_type_context_s *ctx;
    int gindex;
};

struct _cffi_struct_union_s {
    const char *name;
    int type_index;          // -> _cffi_types, on a OP_STRUCT_UNION
    int flags;               // _CFFI_F_* flags below
    size_t size;
    int alignment;
    int first_field_index;   // -> _cffi_fields array
    int num_fields;
};
#define _CFFI_F_UNION         0x01   // is a union, not a struct
#define _CFFI_F_CHECK_FIELDS  0x02   // complain if fields are not in the
                                     // "standard layout" or if some are missing
#define _CFFI_F_PACKED        0x04   // for CHECK_FIELDS, assume a packed struct
#define _CFFI_F_EXTERNAL      0x08   // in some other ffi.include()
#define _CFFI_F_OPAQUE        0x10   // opaque

struct _cffi_field_s {
    const char *name;
    size_t field_offset;
    size_t field_size;
    _cffi_opcode_t field_type_op;
};

struct _cffi_enum_s {
    const char *name;
    int type_index;          // -> _cffi_types, on a OP_ENUM
    int type_prim;           // _CFFI_PRIM_xxx
    const char *enumerators; // comma-delimited string
};

struct _cffi_typename_s {
    const char *name;
    int type_index;   /* if opaque, points to a possibly artificial
                         OP_STRUCT which is itself opaque */
};

struct _cffi_type_context_s {
    _cffi_opcode_t *types;
    const struct _cffi_global_s *globals;
    const struct _cffi_field_s *fields;
    const struct _cffi_struct_union_s *struct_unions;
    const struct _cffi_enum_s *enums;
    const struct _cffi_typename_s *typenames;
    int num_globals;
    int num_struct_unions;
    int num_enums;
    int num_typenames;
    const char *const *includes;
    int num_types;
    int flags;      /* future extension */
};

struct _cffi_parse_info_s {
    const struct _cffi_type_context_s *ctx;
    _cffi_opcode_t *output;
    unsigned int output_size;
    size_t error_location;
    const char *error_message;
};

struct _cffi_externpy_s {
    const char *name;
    size_t size_of_result;
    void *reserved1, *reserved2;
};

#ifdef _CFFI_INTERNAL
static int parse_c_type(struct _cffi_parse_info_s *info, const char *input);
static int search_in_globals(const struct _cffi_type_context_s *ctx,
                             const char *search, size_t search_len);
static int search_in_struct_unions(const struct _cffi_type_context_s *ctx,
                                   const char *search, size_t search_len);
#endif

/* this block of #ifs should be kept exactly identical between
   c/_cffi_backend.c, cffi/vengine_cpy.py, cffi/vengine_gen.py
   and cffi/_cffi_include.h */
#if defined(_MSC_VER)
# include <malloc.h>   /* for alloca() */
# if _MSC_VER < 1600   /* MSVC < 2010 */
   typedef __int8 int8_t;
   typedef __int16 int16_t;
   typedef __int32 int32_t;
   typedef __int64 int64_t;
   typedef unsigned __int8 uint8_t;
   typedef unsigned __int16 uint16_t;
   typedef unsigned __int32 uint32_t;
   typedef unsigned __int64 uint64_t;
   typedef __int8 int_least8_t;
   typedef __int16 int_least16_t;
   typedef __int32 int_least32_t;
   typedef __int64 int_least64_t;
   typedef unsigned __int8 uint_least8_t;
   typedef unsigned __int16 uint_least16_t;
   typedef unsigned __int32 uint_least32_t;
   typedef unsigned __int64 uint_least64_t;
   typedef __int8 int_fast8_t;
   typedef __int16 int_fast16_t;
   typedef __int32 int_fast32_t;
   typedef __int64 int_fast64_t;
   typedef unsigned __int8 uint_fast8_t;
   typedef unsigned __int16 uint_fast16_t;
   typedef unsigned __int32 uint_fast32_t;
   typedef unsigned __int64 uint_fast64_t;
   typedef __int64 intmax_t;
   typedef unsigned __int64 uintmax_t;
# else
#  include <stdint.h>
# endif
# if _MSC_VER < 1800   /* MSVC < 2013 */
#  ifndef __cplusplus
    typedef unsigned char _Bool;
#  endif
# endif
#else
# include <stdint.h>
# if (defined (__SVR4) && defined (__sun)) || defined(_AIX) || defined(__hpux)
#  include <alloca.h>
# endif
#endif

#ifdef __GNUC__
# define _CFFI_UNUSED_FN  __attribute__((unused))
#else
# define _CFFI_UNUSED_FN  /* nothing */
#endif

#ifdef __cplusplus
# ifndef _Bool
   typedef bool _Bool;   /* semi-hackish: C++ has no _Bool; bool is builtin */
# endif
#endif

/**********  CPython-specific section  **********/
#ifndef PYPY_VERSION


#if PY_MAJOR_VERSION >= 3
# define PyInt_FromLong PyLong_FromLong
#endif

#define _cffi_from_c_double PyFloat_FromDouble
#define _cffi_from_c_float PyFloat_FromDouble
#define _cffi_from_c_long PyInt_FromLong
#define _cffi_from_c_ulong PyLong_FromUnsignedLong
#define _cffi_from_c_longlong PyLong_FromLongLong
#define _cffi_from_c_ulonglong PyLong_FromUnsignedLongLong

#define _cffi_to_c_double PyFloat_AsDouble
#define _cffi_to_c_float PyFloat_AsDouble

#define _cffi_from_c_int(x, type)                                        \
    (((type)-1) > 0 ? /* unsigned */                                     \
        (sizeof(type) < sizeof(long) ?                                   \
            PyInt_FromLong((long)x) :                                    \
         sizeof(type) == sizeof(long) ?                                  \
            PyLong_FromUnsignedLong((unsigned long)x) :                  \
            PyLong_FromUnsignedLongLong((unsigned long long)x)) :        \
        (sizeof(type) <= sizeof(long) ?                                  \
            PyInt_FromLong((long)x) :                                    \
            PyLong_FromLongLong((long long)x)))

#define _cffi_to_c_int(o, type)                                          \
    ((type)(                                                             \
     sizeof(type) == 1 ? (((type)-1) > 0 ? (type)_cffi_to_c_u8(o)        \
                                         : (type)_cffi_to_c_i8(o)) :     \
     sizeof(type) == 2 ? (((type)-1) > 0 ? (type)_cffi_to_c_u16(o)       \
                                         : (type)_cffi_to_c_i16(o)) :    \
     sizeof(type) == 4 ? (((type)-1) > 0 ? (type)_cffi_to_c_u32(o)       \
                                         : (type)_cffi_to_c_i32(o)) :    \
     sizeof(type) == 8 ? (((type)-1) > 0 ? (type)_cffi_to_c_u64(o)       \
                                         : (type)_cffi_to_c_i64(o)) :    \
     (Py_FatalError("unsupported size for type " #type), (type)0)))

#define _cffi_to_c_i8                                                    \
                 ((int(*)(PyObject *))_cffi_exports[1])
#define _cffi_to_c_u8                                                    \
                 ((int(*)(PyObject *))_cffi_exports[2])
#define _cffi_to_c_i16                                                   \
                 ((int(*)(PyObject *))_cffi_exports[3])
#define _cffi_to_c_u16                                                   \
                 ((int(*)(PyObject *))_cffi_exports[4])
#define _cffi_to_c_i32                                                   \
                 ((int(*)(PyObject *))_cffi_exports[5])
#define _cffi_to_c_u32                                                   \
                 ((unsigned int(*)(PyObject *))_cffi_exports[6])
#define _cffi_to_c_i64                                                   \
                 ((long long(*)(PyObject *))_cffi_exports[7])
#define _cffi_to_c_u64                                                   \
                 ((unsigned long long(*)(PyObject *))_cffi_exports[8])
#define _cffi_to_c_char                                                  \
                 ((int(*)(PyObject *))_cffi_exports[9])
#define _cffi_from_c_pointer                                             \
    ((PyObject *(*)(char *, CTypeDescrObject *))_cffi_exports[10])
#define _cffi_to_c_pointer                                               \
    ((char *(*)(PyObject *, CTypeDescrObject *))_cffi_exports[11])
#define _cffi_get_struct_layout                                          \
    not used any more
#define _cffi_restore_errno                                              \
    ((void(*)(void))_cffi_exports[13])
#define _cffi_save_errno                                                 \
    ((void(*)(void))_cffi_exports[14])
#define _cffi_from_c_char                                                \
    ((PyObject *(*)(char))_cffi_exports[15])
#define _cffi_from_c_deref                                               \
    ((PyObject *(*)(char *, CTypeDescrObject *))_cffi_exports[16])
#define _cffi_to_c                                                       \
    ((int(*)(char *, CTypeDescrObject *, PyObject *))_cffi_exports[17])
#define _cffi_from_c_struct                                              \
    ((PyObject *(*)(char *, CTypeDescrObject *))_cffi_exports[18])
#define _cffi_to_c_wchar_t                                               \
    ((wchar_t(*)(PyObject *))_cffi_exports[19])
#define _cffi_from_c_wchar_t                                             \
    ((PyObject *(*)(wchar_t))_cffi_exports[20])
#define _cffi_to_c_long_double                                           \
    ((long double(*)(PyObject *))_cffi_exports[21])
#define _cffi_to_c__Bool                                                 \
    ((_Bool(*)(PyObject *))_cffi_exports[22])
#define _cffi_prepare_pointer_call_argument                              \
    ((Py_ssize_t(*)(CTypeDescrObject *, PyObject *, char **))_cffi_exports[23])
#define _cffi_convert_array_from_object                                  \
    ((int(*)(char *, CTypeDescrObject *, PyObject *))_cffi_exports[24])
#define _CFFI_CPIDX  25
#define _cffi_call_python                                                \
    ((void(*)(struct _cffi_externpy_s *, char *))_cffi_exports[_CFFI_CPIDX])
#define _CFFI_NUM_EXPORTS 26

typedef struct _ctypedescr CTypeDescrObject;

static void *_cffi_exports[_CFFI_NUM_EXPORTS];

#define _cffi_type(index)   (                           \
    assert((((uintptr_t)_cffi_types[index]) & 1) == 0), \
    (CTypeDescrObject *)_cffi_types[index])

static PyObject *_cffi_init(const char *module_name, Py_ssize_t version,
                            const struct _cffi_type_context_s *ctx)
{
    PyObject *module, *o_arg, *new_module;
    void *raw[] = {
        (void *)module_name,
        (void *)version,
        (void *)_cffi_exports,
        (void *)ctx,
    };

    module = PyImport_ImportModule("_cffi_backend");
    if (module == NULL)
        goto failure;

    o_arg = PyLong_FromVoidPtr((void *)raw);
    if (o_arg == NULL)
        goto failure;

    new_module = PyObject_CallMethod(
        module, (char *)"_init_cffi_1_0_external_module", (char *)"O", o_arg);

    Py_DECREF(o_arg);
    Py_DECREF(module);
    return new_module;

  failure:
    Py_XDECREF(module);
    return NULL;
}

/**********  end CPython-specific section  **********/
#else
_CFFI_UNUSED_FN
static void (*_cffi_call_python_org)(struct _cffi_externpy_s *, char *);
# define _cffi_call_python  _cffi_call_python_org
#endif


#define _cffi_array_len(array)   (sizeof(array) / sizeof((array)[0]))

#define _cffi_prim_int(size, sign)                                      \
    ((size) == 1 ? ((sign) ? _CFFI_PRIM_INT8  : _CFFI_PRIM_UINT8)  :    \
     (size) == 2 ? ((sign) ? _CFFI_PRIM_INT16 : _CFFI_PRIM_UINT16) :    \
     (size) == 4 ? ((sign) ? _CFFI_PRIM_INT32 : _CFFI_PRIM_UINT32) :    \
     (size) == 8 ? ((sign) ? _CFFI_PRIM_INT64 : _CFFI_PRIM_UINT64) :    \
     _CFFI__UNKNOWN_PRIM)

#define _cffi_prim_float(size)                                          \
    ((size) == sizeof(float) ? _CFFI_PRIM_FLOAT :                       \
     (size) == sizeof(double) ? _CFFI_PRIM_DOUBLE :                     \
     (size) == sizeof(long double) ? _CFFI__UNKNOWN_LONG_DOUBLE :       \
     _CFFI__UNKNOWN_FLOAT_PRIM)

#define _cffi_check_int(got, got_nonpos, expected)      \
    ((got_nonpos) == (expected <= 0) &&                 \
     (got) == (unsigned long long)expected)

#ifdef MS_WIN32
# define _cffi_stdcall  __stdcall
#else
# define _cffi_stdcall  /* nothing */
#endif

#ifdef __cplusplus
}
#endif

/************************************************************/


        #include "wrap_cl.h"
        

/************************************************************/

static void *_cffi_types[] = {
/*  0 */ _CFFI_OP(_CFFI_OP_FUNCTION, 497), // error *()(struct clbase * * *, uint32_t *)
/*  1 */ _CFFI_OP(_CFFI_OP_POINTER, 5), // struct clbase * * *
/*  2 */ _CFFI_OP(_CFFI_OP_POINTER, 7), // uint32_t *
/*  3 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/*  4 */ _CFFI_OP(_CFFI_OP_FUNCTION, 497), // error *()(struct clbase * *, intptr_t const *, uint32_t, struct clbase * const *)
/*  5 */ _CFFI_OP(_CFFI_OP_POINTER, 24), // struct clbase * *
/*  6 */ _CFFI_OP(_CFFI_OP_POINTER, 17), // intptr_t const *
/*  7 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 22), // uint32_t
/*  8 */ _CFFI_OP(_CFFI_OP_POINTER, 24), // struct clbase * const *
/*  9 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 10 */ _CFFI_OP(_CFFI_OP_FUNCTION, 497), // error *()(struct clbase * *, intptr_t const *, uint64_t)
/* 11 */ _CFFI_OP(_CFFI_OP_NOOP, 5),
/* 12 */ _CFFI_OP(_CFFI_OP_NOOP, 6),
/* 13 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 24), // uint64_t
/* 14 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 15 */ _CFFI_OP(_CFFI_OP_FUNCTION, 497), // error *()(struct clbase * *, intptr_t, class_t, int)
/* 16 */ _CFFI_OP(_CFFI_OP_NOOP, 5),
/* 17 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 25), // intptr_t
/* 18 */ _CFFI_OP(_CFFI_OP_ENUM, 0), // class_t
/* 19 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 7), // int
/* 20 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 21 */ _CFFI_OP(_CFFI_OP_FUNCTION, 497), // error *()(struct clbase * *, struct clbase * *, struct clbase *, struct clbase *, uint64_t, size_t const *, size_t, size_t const *, size_t, size_t *, size_t *, struct clbase * const *, uint32_t, int)
/* 22 */ _CFFI_OP(_CFFI_OP_NOOP, 5),
/* 23 */ _CFFI_OP(_CFFI_OP_NOOP, 5),
/* 24 */ _CFFI_OP(_CFFI_OP_POINTER, 522), // struct clbase *
/* 25 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 26 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 24),
/* 27 */ _CFFI_OP(_CFFI_OP_POINTER, 28), // size_t const *
/* 28 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 28), // size_t
/* 29 */ _CFFI_OP(_CFFI_OP_NOOP, 27),
/* 30 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 28),
/* 31 */ _CFFI_OP(_CFFI_OP_POINTER, 28), // size_t *
/* 32 */ _CFFI_OP(_CFFI_OP_NOOP, 31),
/* 33 */ _CFFI_OP(_CFFI_OP_NOOP, 8),
/* 34 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 22),
/* 35 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 7),
/* 36 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 37 */ _CFFI_OP(_CFFI_OP_FUNCTION, 497), // error *()(struct clbase * *, struct clbase * *, struct clbase *, struct clbase *, uint64_t, size_t, size_t, struct clbase * const *, uint32_t, int)
/* 38 */ _CFFI_OP(_CFFI_OP_NOOP, 5),
/* 39 */ _CFFI_OP(_CFFI_OP_NOOP, 5),
/* 40 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 41 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 42 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 24),
/* 43 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 28),
/* 44 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 28),
/* 45 */ _CFFI_OP(_CFFI_OP_NOOP, 8),
/* 46 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 22),
/* 47 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 7),
/* 48 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 49 */ _CFFI_OP(_CFFI_OP_FUNCTION, 497), // error *()(struct clbase * *, struct clbase *)
/* 50 */ _CFFI_OP(_CFFI_OP_NOOP, 5),
/* 51 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 52 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 53 */ _CFFI_OP(_CFFI_OP_FUNCTION, 497), // error *()(struct clbase * *, struct clbase *, char const *)
/* 54 */ _CFFI_OP(_CFFI_OP_NOOP, 5),
/* 55 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 56 */ _CFFI_OP(_CFFI_OP_POINTER, 492), // char const *
/* 57 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 58 */ _CFFI_OP(_CFFI_OP_FUNCTION, 497), // error *()(struct clbase * *, struct clbase *, int, uint32_t, uint32_t)
/* 59 */ _CFFI_OP(_CFFI_OP_NOOP, 5),
/* 60 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 61 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 7),
/* 62 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 22),
/* 63 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 22),
/* 64 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 65 */ _CFFI_OP(_CFFI_OP_FUNCTION, 497), // error *()(struct clbase * *, struct clbase *, size_t, size_t, uint64_t)
/* 66 */ _CFFI_OP(_CFFI_OP_NOOP, 5),
/* 67 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 68 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 28),
/* 69 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 28),
/* 70 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 24),
/* 71 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 72 */ _CFFI_OP(_CFFI_OP_FUNCTION, 497), // error *()(struct clbase * *, struct clbase *, struct clbase * const *, size_t, char const *, struct clbase * const *, size_t)
/* 73 */ _CFFI_OP(_CFFI_OP_NOOP, 5),
/* 74 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 75 */ _CFFI_OP(_CFFI_OP_NOOP, 8),
/* 76 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 28),
/* 77 */ _CFFI_OP(_CFFI_OP_NOOP, 56),
/* 78 */ _CFFI_OP(_CFFI_OP_NOOP, 8),
/* 79 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 28),
/* 80 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 81 */ _CFFI_OP(_CFFI_OP_FUNCTION, 497), // error *()(struct clbase * *, struct clbase *, struct clbase * const *, uint32_t)
/* 82 */ _CFFI_OP(_CFFI_OP_NOOP, 5),
/* 83 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 84 */ _CFFI_OP(_CFFI_OP_NOOP, 8),
/* 85 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 22),
/* 86 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 87 */ _CFFI_OP(_CFFI_OP_FUNCTION, 497), // error *()(struct clbase * *, struct clbase *, struct clbase * const *, uint32_t, char const *)
/* 88 */ _CFFI_OP(_CFFI_OP_NOOP, 5),
/* 89 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 90 */ _CFFI_OP(_CFFI_OP_NOOP, 8),
/* 91 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 22),
/* 92 */ _CFFI_OP(_CFFI_OP_NOOP, 56),
/* 93 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 94 */ _CFFI_OP(_CFFI_OP_FUNCTION, 497), // error *()(struct clbase * *, struct clbase *, struct clbase *, size_t const *, size_t, size_t const *, size_t, void *, size_t, size_t, struct clbase * const *, uint32_t, int, void *)
/* 95 */ _CFFI_OP(_CFFI_OP_NOOP, 5),
/* 96 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 97 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 98 */ _CFFI_OP(_CFFI_OP_NOOP, 27),
/* 99 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 28),
/* 100 */ _CFFI_OP(_CFFI_OP_NOOP, 27),
/* 101 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 28),
/* 102 */ _CFFI_OP(_CFFI_OP_POINTER, 529), // void *
/* 103 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 28),
/* 104 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 28),
/* 105 */ _CFFI_OP(_CFFI_OP_NOOP, 8),
/* 106 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 22),
/* 107 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 7),
/* 108 */ _CFFI_OP(_CFFI_OP_NOOP, 102),
/* 109 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 110 */ _CFFI_OP(_CFFI_OP_FUNCTION, 497), // error *()(struct clbase * *, struct clbase *, struct clbase *, size_t const *, size_t, size_t const *, size_t, void const *, size_t, size_t, struct clbase * const *, uint32_t, int, void *)
/* 111 */ _CFFI_OP(_CFFI_OP_NOOP, 5),
/* 112 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 113 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 114 */ _CFFI_OP(_CFFI_OP_NOOP, 27),
/* 115 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 28),
/* 116 */ _CFFI_OP(_CFFI_OP_NOOP, 27),
/* 117 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 28),
/* 118 */ _CFFI_OP(_CFFI_OP_POINTER, 529), // void const *
/* 119 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 28),
/* 120 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 28),
/* 121 */ _CFFI_OP(_CFFI_OP_NOOP, 8),
/* 122 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 22),
/* 123 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 7),
/* 124 */ _CFFI_OP(_CFFI_OP_NOOP, 102),
/* 125 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 126 */ _CFFI_OP(_CFFI_OP_FUNCTION, 497), // error *()(struct clbase * *, struct clbase *, struct clbase *, struct clbase * const *, uint32_t)
/* 127 */ _CFFI_OP(_CFFI_OP_NOOP, 5),
/* 128 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 129 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 130 */ _CFFI_OP(_CFFI_OP_NOOP, 8),
/* 131 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 22),
/* 132 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 133 */ _CFFI_OP(_CFFI_OP_FUNCTION, 497), // error *()(struct clbase * *, struct clbase *, struct clbase *, struct clbase *, ptrdiff_t, size_t, size_t, struct clbase * const *, uint32_t)
/* 134 */ _CFFI_OP(_CFFI_OP_NOOP, 5),
/* 135 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 136 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 137 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 138 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 27), // ptrdiff_t
/* 139 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 28),
/* 140 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 28),
/* 141 */ _CFFI_OP(_CFFI_OP_NOOP, 8),
/* 142 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 22),
/* 143 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 144 */ _CFFI_OP(_CFFI_OP_FUNCTION, 497), // error *()(struct clbase * *, struct clbase *, struct clbase *, struct clbase *, size_t const *, size_t, size_t const *, size_t, size_t const *, size_t, size_t const *, size_t, size_t const *, size_t, struct clbase * const *, uint32_t)
/* 145 */ _CFFI_OP(_CFFI_OP_NOOP, 5),
/* 146 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 147 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 148 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 149 */ _CFFI_OP(_CFFI_OP_NOOP, 27),
/* 150 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 28),
/* 151 */ _CFFI_OP(_CFFI_OP_NOOP, 27),
/* 152 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 28),
/* 153 */ _CFFI_OP(_CFFI_OP_NOOP, 27),
/* 154 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 28),
/* 155 */ _CFFI_OP(_CFFI_OP_NOOP, 27),
/* 156 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 28),
/* 157 */ _CFFI_OP(_CFFI_OP_NOOP, 27),
/* 158 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 28),
/* 159 */ _CFFI_OP(_CFFI_OP_NOOP, 8),
/* 160 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 22),
/* 161 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 162 */ _CFFI_OP(_CFFI_OP_FUNCTION, 497), // error *()(struct clbase * *, struct clbase *, struct clbase *, struct clbase *, size_t const *, size_t, size_t const *, size_t, size_t const *, size_t, struct clbase * const *, uint32_t)
/* 163 */ _CFFI_OP(_CFFI_OP_NOOP, 5),
/* 164 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 165 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 166 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 167 */ _CFFI_OP(_CFFI_OP_NOOP, 27),
/* 168 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 28),
/* 169 */ _CFFI_OP(_CFFI_OP_NOOP, 27),
/* 170 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 28),
/* 171 */ _CFFI_OP(_CFFI_OP_NOOP, 27),
/* 172 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 28),
/* 173 */ _CFFI_OP(_CFFI_OP_NOOP, 8),
/* 174 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 22),
/* 175 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 176 */ _CFFI_OP(_CFFI_OP_FUNCTION, 497), // error *()(struct clbase * *, struct clbase *, struct clbase *, struct clbase *, size_t const *, size_t, size_t const *, size_t, size_t, struct clbase * const *, uint32_t)
/* 177 */ _CFFI_OP(_CFFI_OP_NOOP, 5),
/* 178 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 179 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 180 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 181 */ _CFFI_OP(_CFFI_OP_NOOP, 27),
/* 182 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 28),
/* 183 */ _CFFI_OP(_CFFI_OP_NOOP, 27),
/* 184 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 28),
/* 185 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 28),
/* 186 */ _CFFI_OP(_CFFI_OP_NOOP, 8),
/* 187 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 22),
/* 188 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 189 */ _CFFI_OP(_CFFI_OP_FUNCTION, 497), // error *()(struct clbase * *, struct clbase *, struct clbase *, struct clbase *, size_t, size_t const *, size_t, size_t const *, size_t, struct clbase * const *, uint32_t)
/* 190 */ _CFFI_OP(_CFFI_OP_NOOP, 5),
/* 191 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 192 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 193 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 194 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 28),
/* 195 */ _CFFI_OP(_CFFI_OP_NOOP, 27),
/* 196 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 28),
/* 197 */ _CFFI_OP(_CFFI_OP_NOOP, 27),
/* 198 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 28),
/* 199 */ _CFFI_OP(_CFFI_OP_NOOP, 8),
/* 200 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 22),
/* 201 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 202 */ _CFFI_OP(_CFFI_OP_FUNCTION, 497), // error *()(struct clbase * *, struct clbase *, struct clbase *, uint32_t, size_t const *, size_t const *, size_t const *, struct clbase * const *, uint32_t)
/* 203 */ _CFFI_OP(_CFFI_OP_NOOP, 5),
/* 204 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 205 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 206 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 22),
/* 207 */ _CFFI_OP(_CFFI_OP_NOOP, 27),
/* 208 */ _CFFI_OP(_CFFI_OP_NOOP, 27),
/* 209 */ _CFFI_OP(_CFFI_OP_NOOP, 27),
/* 210 */ _CFFI_OP(_CFFI_OP_NOOP, 8),
/* 211 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 22),
/* 212 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 213 */ _CFFI_OP(_CFFI_OP_FUNCTION, 497), // error *()(struct clbase * *, struct clbase *, struct clbase *, uint64_t)
/* 214 */ _CFFI_OP(_CFFI_OP_NOOP, 5),
/* 215 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 216 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 217 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 24),
/* 218 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 219 */ _CFFI_OP(_CFFI_OP_FUNCTION, 497), // error *()(struct clbase * *, struct clbase *, struct clbase *, void *, size_t const *, size_t, size_t const *, size_t, size_t const *, size_t, size_t const *, size_t, size_t const *, size_t, struct clbase * const *, uint32_t, int, void *)
/* 220 */ _CFFI_OP(_CFFI_OP_NOOP, 5),
/* 221 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 222 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 223 */ _CFFI_OP(_CFFI_OP_NOOP, 102),
/* 224 */ _CFFI_OP(_CFFI_OP_NOOP, 27),
/* 225 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 28),
/* 226 */ _CFFI_OP(_CFFI_OP_NOOP, 27),
/* 227 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 28),
/* 228 */ _CFFI_OP(_CFFI_OP_NOOP, 27),
/* 229 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 28),
/* 230 */ _CFFI_OP(_CFFI_OP_NOOP, 27),
/* 231 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 28),
/* 232 */ _CFFI_OP(_CFFI_OP_NOOP, 27),
/* 233 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 28),
/* 234 */ _CFFI_OP(_CFFI_OP_NOOP, 8),
/* 235 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 22),
/* 236 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 7),
/* 237 */ _CFFI_OP(_CFFI_OP_NOOP, 102),
/* 238 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 239 */ _CFFI_OP(_CFFI_OP_FUNCTION, 497), // error *()(struct clbase * *, struct clbase *, struct clbase *, void *, size_t, size_t, size_t, struct clbase * const *, uint32_t)
/* 240 */ _CFFI_OP(_CFFI_OP_NOOP, 5),
/* 241 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 242 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 243 */ _CFFI_OP(_CFFI_OP_NOOP, 102),
/* 244 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 28),
/* 245 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 28),
/* 246 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 28),
/* 247 */ _CFFI_OP(_CFFI_OP_NOOP, 8),
/* 248 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 22),
/* 249 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 250 */ _CFFI_OP(_CFFI_OP_FUNCTION, 497), // error *()(struct clbase * *, struct clbase *, struct clbase *, void *, size_t, size_t, struct clbase * const *, uint32_t, int, void *)
/* 251 */ _CFFI_OP(_CFFI_OP_NOOP, 5),
/* 252 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 253 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 254 */ _CFFI_OP(_CFFI_OP_NOOP, 102),
/* 255 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 28),
/* 256 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 28),
/* 257 */ _CFFI_OP(_CFFI_OP_NOOP, 8),
/* 258 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 22),
/* 259 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 7),
/* 260 */ _CFFI_OP(_CFFI_OP_NOOP, 102),
/* 261 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 262 */ _CFFI_OP(_CFFI_OP_FUNCTION, 497), // error *()(struct clbase * *, struct clbase *, struct clbase *, void const *, size_t const *, size_t, size_t const *, size_t, struct clbase * const *, uint32_t)
/* 263 */ _CFFI_OP(_CFFI_OP_NOOP, 5),
/* 264 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 265 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 266 */ _CFFI_OP(_CFFI_OP_NOOP, 118),
/* 267 */ _CFFI_OP(_CFFI_OP_NOOP, 27),
/* 268 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 28),
/* 269 */ _CFFI_OP(_CFFI_OP_NOOP, 27),
/* 270 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 28),
/* 271 */ _CFFI_OP(_CFFI_OP_NOOP, 8),
/* 272 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 22),
/* 273 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 274 */ _CFFI_OP(_CFFI_OP_FUNCTION, 497), // error *()(struct clbase * *, struct clbase *, struct clbase *, void const *, size_t, size_t, struct clbase * const *, uint32_t, int, void *)
/* 275 */ _CFFI_OP(_CFFI_OP_NOOP, 5),
/* 276 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 277 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 278 */ _CFFI_OP(_CFFI_OP_NOOP, 118),
/* 279 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 28),
/* 280 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 28),
/* 281 */ _CFFI_OP(_CFFI_OP_NOOP, 8),
/* 282 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 22),
/* 283 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 7),
/* 284 */ _CFFI_OP(_CFFI_OP_NOOP, 102),
/* 285 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 286 */ _CFFI_OP(_CFFI_OP_FUNCTION, 497), // error *()(struct clbase * *, struct clbase *, uint32_t, struct clbase * const *, unsigned char const * *, size_t *)
/* 287 */ _CFFI_OP(_CFFI_OP_NOOP, 5),
/* 288 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 289 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 22),
/* 290 */ _CFFI_OP(_CFFI_OP_NOOP, 8),
/* 291 */ _CFFI_OP(_CFFI_OP_POINTER, 526), // unsigned char const * *
/* 292 */ _CFFI_OP(_CFFI_OP_NOOP, 31),
/* 293 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 294 */ _CFFI_OP(_CFFI_OP_FUNCTION, 497), // error *()(struct clbase * *, struct clbase *, uint64_t, cl_image_format *, cl_image_desc *, void *)
/* 295 */ _CFFI_OP(_CFFI_OP_NOOP, 5),
/* 296 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 297 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 24),
/* 298 */ _CFFI_OP(_CFFI_OP_POINTER, 495), // cl_image_format *
/* 299 */ _CFFI_OP(_CFFI_OP_POINTER, 494), // cl_image_desc *
/* 300 */ _CFFI_OP(_CFFI_OP_NOOP, 102),
/* 301 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 302 */ _CFFI_OP(_CFFI_OP_FUNCTION, 497), // error *()(struct clbase * *, struct clbase *, uint64_t, cl_image_format *, size_t, size_t, size_t, size_t, size_t, void *)
/* 303 */ _CFFI_OP(_CFFI_OP_NOOP, 5),
/* 304 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 305 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 24),
/* 306 */ _CFFI_OP(_CFFI_OP_NOOP, 298),
/* 307 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 28),
/* 308 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 28),
/* 309 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 28),
/* 310 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 28),
/* 311 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 28),
/* 312 */ _CFFI_OP(_CFFI_OP_NOOP, 102),
/* 313 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 314 */ _CFFI_OP(_CFFI_OP_FUNCTION, 497), // error *()(struct clbase * *, struct clbase *, uint64_t, cl_image_format *, size_t, size_t, size_t, void *)
/* 315 */ _CFFI_OP(_CFFI_OP_NOOP, 5),
/* 316 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 317 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 24),
/* 318 */ _CFFI_OP(_CFFI_OP_NOOP, 298),
/* 319 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 28),
/* 320 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 28),
/* 321 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 28),
/* 322 */ _CFFI_OP(_CFFI_OP_NOOP, 102),
/* 323 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 324 */ _CFFI_OP(_CFFI_OP_FUNCTION, 497), // error *()(struct clbase * *, struct clbase *, uint64_t, size_t, void *)
/* 325 */ _CFFI_OP(_CFFI_OP_NOOP, 5),
/* 326 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 327 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 24),
/* 328 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 28),
/* 329 */ _CFFI_OP(_CFFI_OP_NOOP, 102),
/* 330 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 331 */ _CFFI_OP(_CFFI_OP_FUNCTION, 497), // error *()(struct clbase * const *, uint32_t)
/* 332 */ _CFFI_OP(_CFFI_OP_NOOP, 8),
/* 333 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 22),
/* 334 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 335 */ _CFFI_OP(_CFFI_OP_FUNCTION, 497), // error *()(struct clbase *)
/* 336 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 337 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 338 */ _CFFI_OP(_CFFI_OP_FUNCTION, 497), // error *()(struct clbase *, char const *, struct clbase * const *, size_t, struct clbase * const *, char const * const *, size_t)
/* 339 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 340 */ _CFFI_OP(_CFFI_OP_NOOP, 56),
/* 341 */ _CFFI_OP(_CFFI_OP_NOOP, 8),
/* 342 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 28),
/* 343 */ _CFFI_OP(_CFFI_OP_NOOP, 8),
/* 344 */ _CFFI_OP(_CFFI_OP_POINTER, 56), // char const * const *
/* 345 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 28),
/* 346 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 347 */ _CFFI_OP(_CFFI_OP_FUNCTION, 497), // error *()(struct clbase *, char const *, uint32_t, struct clbase * const *)
/* 348 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 349 */ _CFFI_OP(_CFFI_OP_NOOP, 56),
/* 350 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 22),
/* 351 */ _CFFI_OP(_CFFI_OP_NOOP, 8),
/* 352 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 353 */ _CFFI_OP(_CFFI_OP_FUNCTION, 497), // error *()(struct clbase *, int *)
/* 354 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 355 */ _CFFI_OP(_CFFI_OP_POINTER, 19), // int *
/* 356 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 357 */ _CFFI_OP(_CFFI_OP_FUNCTION, 497), // error *()(struct clbase *, int32_t)
/* 358 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 359 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 21), // int32_t
/* 360 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 361 */ _CFFI_OP(_CFFI_OP_FUNCTION, 497), // error *()(struct clbase *, int32_t, void *)
/* 362 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 363 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 21),
/* 364 */ _CFFI_OP(_CFFI_OP_NOOP, 102),
/* 365 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 366 */ _CFFI_OP(_CFFI_OP_FUNCTION, 497), // error *()(struct clbase *, struct clbase * * *, uint32_t *)
/* 367 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 368 */ _CFFI_OP(_CFFI_OP_NOOP, 1),
/* 369 */ _CFFI_OP(_CFFI_OP_NOOP, 2),
/* 370 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 371 */ _CFFI_OP(_CFFI_OP_FUNCTION, 497), // error *()(struct clbase *, struct clbase * * *, uint32_t *, intptr_t const *)
/* 372 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 373 */ _CFFI_OP(_CFFI_OP_NOOP, 1),
/* 374 */ _CFFI_OP(_CFFI_OP_NOOP, 2),
/* 375 */ _CFFI_OP(_CFFI_OP_NOOP, 6),
/* 376 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 377 */ _CFFI_OP(_CFFI_OP_FUNCTION, 497), // error *()(struct clbase *, struct clbase * * *, uint32_t *, uint64_t)
/* 378 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 379 */ _CFFI_OP(_CFFI_OP_NOOP, 1),
/* 380 */ _CFFI_OP(_CFFI_OP_NOOP, 2),
/* 381 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 24),
/* 382 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 383 */ _CFFI_OP(_CFFI_OP_FUNCTION, 497), // error *()(struct clbase *, struct clbase * const *, uint32_t)
/* 384 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 385 */ _CFFI_OP(_CFFI_OP_NOOP, 8),
/* 386 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 22),
/* 387 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 388 */ _CFFI_OP(_CFFI_OP_FUNCTION, 497), // error *()(struct clbase *, struct clbase *, struct clbase * const *, uint32_t, struct clbase * *)
/* 389 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 390 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 391 */ _CFFI_OP(_CFFI_OP_NOOP, 8),
/* 392 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 22),
/* 393 */ _CFFI_OP(_CFFI_OP_NOOP, 5),
/* 394 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 395 */ _CFFI_OP(_CFFI_OP_FUNCTION, 497), // error *()(struct clbase *, struct clbase *, uint32_t, generic_info *)
/* 396 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 397 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 398 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 22),
/* 399 */ _CFFI_OP(_CFFI_OP_POINTER, 500), // generic_info *
/* 400 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 401 */ _CFFI_OP(_CFFI_OP_FUNCTION, 497), // error *()(struct clbase *, uint32_t)
/* 402 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 403 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 22),
/* 404 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 405 */ _CFFI_OP(_CFFI_OP_FUNCTION, 497), // error *()(struct clbase *, uint32_t, generic_info *)
/* 406 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 407 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 22),
/* 408 */ _CFFI_OP(_CFFI_OP_NOOP, 399),
/* 409 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 410 */ _CFFI_OP(_CFFI_OP_FUNCTION, 497), // error *()(struct clbase *, uint32_t, struct clbase *)
/* 411 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 412 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 22),
/* 413 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 414 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 415 */ _CFFI_OP(_CFFI_OP_FUNCTION, 497), // error *()(struct clbase *, uint32_t, struct clbase *, generic_info *)
/* 416 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 417 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 22),
/* 418 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 419 */ _CFFI_OP(_CFFI_OP_NOOP, 399),
/* 420 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 421 */ _CFFI_OP(_CFFI_OP_FUNCTION, 497), // error *()(struct clbase *, uint32_t, uint32_t, generic_info *)
/* 422 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 423 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 22),
/* 424 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 22),
/* 425 */ _CFFI_OP(_CFFI_OP_NOOP, 399),
/* 426 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 427 */ _CFFI_OP(_CFFI_OP_FUNCTION, 497), // error *()(struct clbase *, uint32_t, void const *, size_t)
/* 428 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 429 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 22),
/* 430 */ _CFFI_OP(_CFFI_OP_NOOP, 118),
/* 431 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 28),
/* 432 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 433 */ _CFFI_OP(_CFFI_OP_FUNCTION, 497), // error *()(struct clbase *, uint64_t, uint32_t, generic_info *)
/* 434 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 435 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 24),
/* 436 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 22),
/* 437 */ _CFFI_OP(_CFFI_OP_NOOP, 399),
/* 438 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 439 */ _CFFI_OP(_CFFI_OP_FUNCTION, 497), // error *()(struct clbase *, void * *, size_t *)
/* 440 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 441 */ _CFFI_OP(_CFFI_OP_POINTER, 102), // void * *
/* 442 */ _CFFI_OP(_CFFI_OP_NOOP, 31),
/* 443 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 444 */ _CFFI_OP(_CFFI_OP_FUNCTION, 19), // int()(void)
/* 445 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 446 */ _CFFI_OP(_CFFI_OP_FUNCTION, 17), // intptr_t()(struct clbase *)
/* 447 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 448 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 449 */ _CFFI_OP(_CFFI_OP_FUNCTION, 523), // type_t()(struct clbase *)
/* 450 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 451 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 452 */ _CFFI_OP(_CFFI_OP_FUNCTION, 528), // unsigned int()(unsigned long)
/* 453 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 10), // unsigned long
/* 454 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 455 */ _CFFI_OP(_CFFI_OP_FUNCTION, 102), // void *()(struct clbase *)
/* 456 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 457 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 458 */ _CFFI_OP(_CFFI_OP_FUNCTION, 102), // void *()(void *)
/* 459 */ _CFFI_OP(_CFFI_OP_NOOP, 102),
/* 460 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 461 */ _CFFI_OP(_CFFI_OP_FUNCTION, 529), // void()(char const *, char const *, int64_t)
/* 462 */ _CFFI_OP(_CFFI_OP_NOOP, 56),
/* 463 */ _CFFI_OP(_CFFI_OP_NOOP, 56),
/* 464 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 23), // int64_t
/* 465 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 466 */ _CFFI_OP(_CFFI_OP_FUNCTION, 529), // void()(int(*)(void), void *(*)(void *), void(*)(void *), void(*)(void *, int32_t))
/* 467 */ _CFFI_OP(_CFFI_OP_POINTER, 444), // int(*)(void)
/* 468 */ _CFFI_OP(_CFFI_OP_POINTER, 458), // void *(*)(void *)
/* 469 */ _CFFI_OP(_CFFI_OP_POINTER, 482), // void(*)(void *)
/* 470 */ _CFFI_OP(_CFFI_OP_POINTER, 485), // void(*)(void *, int32_t)
/* 471 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 472 */ _CFFI_OP(_CFFI_OP_FUNCTION, 529), // void()(int)
/* 473 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 7),
/* 474 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 475 */ _CFFI_OP(_CFFI_OP_FUNCTION, 529), // void()(struct clbase *)
/* 476 */ _CFFI_OP(_CFFI_OP_NOOP, 24),
/* 477 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 478 */ _CFFI_OP(_CFFI_OP_FUNCTION, 529), // void()(void * *, uint32_t)
/* 479 */ _CFFI_OP(_CFFI_OP_NOOP, 441),
/* 480 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 22),
/* 481 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 482 */ _CFFI_OP(_CFFI_OP_FUNCTION, 529), // void()(void *)
/* 483 */ _CFFI_OP(_CFFI_OP_NOOP, 102),
/* 484 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 485 */ _CFFI_OP(_CFFI_OP_FUNCTION, 529), // void()(void *, int32_t)
/* 486 */ _CFFI_OP(_CFFI_OP_NOOP, 102),
/* 487 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 21),
/* 488 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 489 */ _CFFI_OP(_CFFI_OP_FUNCTION, 529), // void()(void(*)(char const *, char const *, int64_t))
/* 490 */ _CFFI_OP(_CFFI_OP_POINTER, 461), // void(*)(char const *, char const *, int64_t)
/* 491 */ _CFFI_OP(_CFFI_OP_FUNCTION_END, 0),
/* 492 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 2), // char
/* 493 */ _CFFI_OP(_CFFI_OP_STRUCT_UNION, 2), // cl_buffer_region
/* 494 */ _CFFI_OP(_CFFI_OP_STRUCT_UNION, 7), // cl_image_desc
/* 495 */ _CFFI_OP(_CFFI_OP_STRUCT_UNION, 8), // cl_image_format
/* 496 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 14), // double
/* 497 */ _CFFI_OP(_CFFI_OP_POINTER, 498), // error *
/* 498 */ _CFFI_OP(_CFFI_OP_STRUCT_UNION, 0), // error
/* 499 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 13), // float
/* 500 */ _CFFI_OP(_CFFI_OP_STRUCT_UNION, 1), // generic_info
/* 501 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 19), // int16_t
/* 502 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 17), // int8_t
/* 503 */ _CFFI_OP(_CFFI_OP_ENUM, 1), // program_kind_type
/* 504 */ _CFFI_OP(_CFFI_OP_POINTER, 505), // struct _cl_command_queue *
/* 505 */ _CFFI_OP(_CFFI_OP_STRUCT_UNION, 3), // struct _cl_command_queue
/* 506 */ _CFFI_OP(_CFFI_OP_POINTER, 507), // struct _cl_context *
/* 507 */ _CFFI_OP(_CFFI_OP_STRUCT_UNION, 4), // struct _cl_context
/* 508 */ _CFFI_OP(_CFFI_OP_POINTER, 509), // struct _cl_device_id *
/* 509 */ _CFFI_OP(_CFFI_OP_STRUCT_UNION, 5), // struct _cl_device_id
/* 510 */ _CFFI_OP(_CFFI_OP_POINTER, 511), // struct _cl_event *
/* 511 */ _CFFI_OP(_CFFI_OP_STRUCT_UNION, 6), // struct _cl_event
/* 512 */ _CFFI_OP(_CFFI_OP_POINTER, 513), // struct _cl_kernel *
/* 513 */ _CFFI_OP(_CFFI_OP_STRUCT_UNION, 9), // struct _cl_kernel
/* 514 */ _CFFI_OP(_CFFI_OP_POINTER, 515), // struct _cl_mem *
/* 515 */ _CFFI_OP(_CFFI_OP_STRUCT_UNION, 10), // struct _cl_mem
/* 516 */ _CFFI_OP(_CFFI_OP_POINTER, 517), // struct _cl_platform_id *
/* 517 */ _CFFI_OP(_CFFI_OP_STRUCT_UNION, 11), // struct _cl_platform_id
/* 518 */ _CFFI_OP(_CFFI_OP_POINTER, 519), // struct _cl_program *
/* 519 */ _CFFI_OP(_CFFI_OP_STRUCT_UNION, 12), // struct _cl_program
/* 520 */ _CFFI_OP(_CFFI_OP_POINTER, 521), // struct _cl_sampler *
/* 521 */ _CFFI_OP(_CFFI_OP_STRUCT_UNION, 13), // struct _cl_sampler
/* 522 */ _CFFI_OP(_CFFI_OP_STRUCT_UNION, 14), // struct clbase
/* 523 */ _CFFI_OP(_CFFI_OP_ENUM, 2), // type_t
/* 524 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 20), // uint16_t
/* 525 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 18), // uint8_t
/* 526 */ _CFFI_OP(_CFFI_OP_POINTER, 527), // unsigned char const *
/* 527 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 4), // unsigned char
/* 528 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 8), // unsigned int
/* 529 */ _CFFI_OP(_CFFI_OP_PRIMITIVE, 0), // void
};

static int _cffi_const_CLASS_NONE(unsigned long long *o)
{
  int n = (CLASS_NONE) <= 0;
  *o = (unsigned long long)((CLASS_NONE) | 0);  /* check that CLASS_NONE is an integer */
  return n;
}

static int _cffi_const_CLASS_PLATFORM(unsigned long long *o)
{
  int n = (CLASS_PLATFORM) <= 0;
  *o = (unsigned long long)((CLASS_PLATFORM) | 0);  /* check that CLASS_PLATFORM is an integer */
  return n;
}

static int _cffi_const_CLASS_DEVICE(unsigned long long *o)
{
  int n = (CLASS_DEVICE) <= 0;
  *o = (unsigned long long)((CLASS_DEVICE) | 0);  /* check that CLASS_DEVICE is an integer */
  return n;
}

static int _cffi_const_CLASS_KERNEL(unsigned long long *o)
{
  int n = (CLASS_KERNEL) <= 0;
  *o = (unsigned long long)((CLASS_KERNEL) | 0);  /* check that CLASS_KERNEL is an integer */
  return n;
}

static int _cffi_const_CLASS_CONTEXT(unsigned long long *o)
{
  int n = (CLASS_CONTEXT) <= 0;
  *o = (unsigned long long)((CLASS_CONTEXT) | 0);  /* check that CLASS_CONTEXT is an integer */
  return n;
}

static int _cffi_const_CLASS_BUFFER(unsigned long long *o)
{
  int n = (CLASS_BUFFER) <= 0;
  *o = (unsigned long long)((CLASS_BUFFER) | 0);  /* check that CLASS_BUFFER is an integer */
  return n;
}

static int _cffi_const_CLASS_PROGRAM(unsigned long long *o)
{
  int n = (CLASS_PROGRAM) <= 0;
  *o = (unsigned long long)((CLASS_PROGRAM) | 0);  /* check that CLASS_PROGRAM is an integer */
  return n;
}

static int _cffi_const_CLASS_EVENT(unsigned long long *o)
{
  int n = (CLASS_EVENT) <= 0;
  *o = (unsigned long long)((CLASS_EVENT) | 0);  /* check that CLASS_EVENT is an integer */
  return n;
}

static int _cffi_const_CLASS_COMMAND_QUEUE(unsigned long long *o)
{
  int n = (CLASS_COMMAND_QUEUE) <= 0;
  *o = (unsigned long long)((CLASS_COMMAND_QUEUE) | 0);  /* check that CLASS_COMMAND_QUEUE is an integer */
  return n;
}

static int _cffi_const_CLASS_GL_BUFFER(unsigned long long *o)
{
  int n = (CLASS_GL_BUFFER) <= 0;
  *o = (unsigned long long)((CLASS_GL_BUFFER) | 0);  /* check that CLASS_GL_BUFFER is an integer */
  return n;
}

static int _cffi_const_CLASS_GL_RENDERBUFFER(unsigned long long *o)
{
  int n = (CLASS_GL_RENDERBUFFER) <= 0;
  *o = (unsigned long long)((CLASS_GL_RENDERBUFFER) | 0);  /* check that CLASS_GL_RENDERBUFFER is an integer */
  return n;
}

static int _cffi_const_CLASS_IMAGE(unsigned long long *o)
{
  int n = (CLASS_IMAGE) <= 0;
  *o = (unsigned long long)((CLASS_IMAGE) | 0);  /* check that CLASS_IMAGE is an integer */
  return n;
}

static int _cffi_const_CLASS_SAMPLER(unsigned long long *o)
{
  int n = (CLASS_SAMPLER) <= 0;
  *o = (unsigned long long)((CLASS_SAMPLER) | 0);  /* check that CLASS_SAMPLER is an integer */
  return n;
}

_CFFI_UNUSED_FN
static void _cffi_checkfld_typedef_error(error *p)
{
  /* only to generate compile-time warnings or errors */
  (void)p;
  { char const * *tmp = &p->routine; (void)tmp; }
  { char const * *tmp = &p->msg; (void)tmp; }
  (void)((p->code) | 0);  /* check that 'error.code' is an integer */
  (void)((p->other) | 0);  /* check that 'error.other' is an integer */
}
struct _cffi_align_typedef_error { char x; error y; };

_CFFI_UNUSED_FN
static void _cffi_checkfld_typedef_generic_info(generic_info *p)
{
  /* only to generate compile-time warnings or errors */
  (void)p;
  { class_t *tmp = &p->opaque_class; (void)tmp; }
  { char const * *tmp = &p->type; (void)tmp; }
  { void * *tmp = &p->value; (void)tmp; }
  (void)((p->dontfree) | 0);  /* check that 'generic_info.dontfree' is an integer */
}
struct _cffi_align_typedef_generic_info { char x; generic_info y; };

static int _cffi_const_KND_UNKNOWN(unsigned long long *o)
{
  int n = (KND_UNKNOWN) <= 0;
  *o = (unsigned long long)((KND_UNKNOWN) | 0);  /* check that KND_UNKNOWN is an integer */
  return n;
}

static int _cffi_const_KND_SOURCE(unsigned long long *o)
{
  int n = (KND_SOURCE) <= 0;
  *o = (unsigned long long)((KND_SOURCE) | 0);  /* check that KND_SOURCE is an integer */
  return n;
}

static int _cffi_const_KND_BINARY(unsigned long long *o)
{
  int n = (KND_BINARY) <= 0;
  *o = (unsigned long long)((KND_BINARY) | 0);  /* check that KND_BINARY is an integer */
  return n;
}

static int _cffi_const_TYPE_FLOAT(unsigned long long *o)
{
  int n = (TYPE_FLOAT) <= 0;
  *o = (unsigned long long)((TYPE_FLOAT) | 0);  /* check that TYPE_FLOAT is an integer */
  return n;
}

static int _cffi_const_TYPE_INT(unsigned long long *o)
{
  int n = (TYPE_INT) <= 0;
  *o = (unsigned long long)((TYPE_INT) | 0);  /* check that TYPE_INT is an integer */
  return n;
}

static int _cffi_const_TYPE_UINT(unsigned long long *o)
{
  int n = (TYPE_UINT) <= 0;
  *o = (unsigned long long)((TYPE_UINT) | 0);  /* check that TYPE_UINT is an integer */
  return n;
}

static unsigned int _cffi_d_bitlog2(unsigned long x0)
{
  return bitlog2(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_bitlog2(PyObject *self, PyObject *arg0)
{
  unsigned long x0;
  unsigned int result;

  x0 = _cffi_to_c_int(arg0, unsigned long);
  if (x0 == (unsigned long)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = bitlog2(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, unsigned int);
}
#else
#  define _cffi_f_bitlog2 _cffi_d_bitlog2
#endif

static error * _cffi_d_buffer__get_sub_region(struct clbase * * x0, struct clbase * x1, size_t x2, size_t x3, uint64_t x4)
{
  return buffer__get_sub_region(x0, x1, x2, x3, x4);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_buffer__get_sub_region(PyObject *self, PyObject *args)
{
  struct clbase * * x0;
  struct clbase * x1;
  size_t x2;
  size_t x3;
  uint64_t x4;
  Py_ssize_t datasize;
  error * result;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;
  PyObject *arg4;

  if (!PyArg_UnpackTuple(args, "buffer__get_sub_region", 5, 5, &arg0, &arg1, &arg2, &arg3, &arg4))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(5), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (struct clbase * *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(5), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(24), arg1) < 0)
      return NULL;
  }

  x2 = _cffi_to_c_int(arg2, size_t);
  if (x2 == (size_t)-1 && PyErr_Occurred())
    return NULL;

  x3 = _cffi_to_c_int(arg3, size_t);
  if (x3 == (size_t)-1 && PyErr_Occurred())
    return NULL;

  x4 = _cffi_to_c_int(arg4, uint64_t);
  if (x4 == (uint64_t)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = buffer__get_sub_region(x0, x1, x2, x3, x4); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(497));
}
#else
#  define _cffi_f_buffer__get_sub_region _cffi_d_buffer__get_sub_region
#endif

static void _cffi_d_clobj__delete(struct clbase * x0)
{
  clobj__delete(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_clobj__delete(PyObject *self, PyObject *arg0)
{
  struct clbase * x0;
  Py_ssize_t datasize;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(24), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { clobj__delete(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_clobj__delete _cffi_d_clobj__delete
#endif

static error * _cffi_d_clobj__from_int_ptr(struct clbase * * x0, intptr_t x1, class_t x2, int x3)
{
  return clobj__from_int_ptr(x0, x1, x2, x3);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_clobj__from_int_ptr(PyObject *self, PyObject *args)
{
  struct clbase * * x0;
  intptr_t x1;
  class_t x2;
  int x3;
  Py_ssize_t datasize;
  error * result;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;

  if (!PyArg_UnpackTuple(args, "clobj__from_int_ptr", 4, 4, &arg0, &arg1, &arg2, &arg3))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(5), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (struct clbase * *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(5), arg0) < 0)
      return NULL;
  }

  x1 = _cffi_to_c_int(arg1, intptr_t);
  if (x1 == (intptr_t)-1 && PyErr_Occurred())
    return NULL;

  if (_cffi_to_c((char *)&x2, _cffi_type(18), arg2) < 0)
    return NULL;

  x3 = _cffi_to_c_int(arg3, int);
  if (x3 == (int)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = clobj__from_int_ptr(x0, x1, x2, x3); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(497));
}
#else
#  define _cffi_f_clobj__from_int_ptr _cffi_d_clobj__from_int_ptr
#endif

static error * _cffi_d_clobj__get_info(struct clbase * x0, uint32_t x1, generic_info * x2)
{
  return clobj__get_info(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_clobj__get_info(PyObject *self, PyObject *args)
{
  struct clbase * x0;
  uint32_t x1;
  generic_info * x2;
  Py_ssize_t datasize;
  error * result;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "clobj__get_info", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(24), arg0) < 0)
      return NULL;
  }

  x1 = _cffi_to_c_int(arg1, uint32_t);
  if (x1 == (uint32_t)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(399), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (generic_info *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(399), arg2) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = clobj__get_info(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(497));
}
#else
#  define _cffi_f_clobj__get_info _cffi_d_clobj__get_info
#endif

static intptr_t _cffi_d_clobj__int_ptr(struct clbase * x0)
{
  return clobj__int_ptr(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_clobj__int_ptr(PyObject *self, PyObject *arg0)
{
  struct clbase * x0;
  Py_ssize_t datasize;
  intptr_t result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(24), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = clobj__int_ptr(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_int(result, intptr_t);
}
#else
#  define _cffi_f_clobj__int_ptr _cffi_d_clobj__int_ptr
#endif

static error * _cffi_d_command_queue__finish(struct clbase * x0)
{
  return command_queue__finish(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_command_queue__finish(PyObject *self, PyObject *arg0)
{
  struct clbase * x0;
  Py_ssize_t datasize;
  error * result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(24), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = command_queue__finish(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(497));
}
#else
#  define _cffi_f_command_queue__finish _cffi_d_command_queue__finish
#endif

static error * _cffi_d_command_queue__flush(struct clbase * x0)
{
  return command_queue__flush(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_command_queue__flush(PyObject *self, PyObject *arg0)
{
  struct clbase * x0;
  Py_ssize_t datasize;
  error * result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(24), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = command_queue__flush(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(497));
}
#else
#  define _cffi_f_command_queue__flush _cffi_d_command_queue__flush
#endif

static error * _cffi_d_context__get_supported_image_formats(struct clbase * x0, uint64_t x1, uint32_t x2, generic_info * x3)
{
  return context__get_supported_image_formats(x0, x1, x2, x3);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_context__get_supported_image_formats(PyObject *self, PyObject *args)
{
  struct clbase * x0;
  uint64_t x1;
  uint32_t x2;
  generic_info * x3;
  Py_ssize_t datasize;
  error * result;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;

  if (!PyArg_UnpackTuple(args, "context__get_supported_image_formats", 4, 4, &arg0, &arg1, &arg2, &arg3))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(24), arg0) < 0)
      return NULL;
  }

  x1 = _cffi_to_c_int(arg1, uint64_t);
  if (x1 == (uint64_t)-1 && PyErr_Occurred())
    return NULL;

  x2 = _cffi_to_c_int(arg2, uint32_t);
  if (x2 == (uint32_t)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(399), arg3, (char **)&x3);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x3 = (generic_info *)alloca((size_t)datasize);
    memset((void *)x3, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x3, _cffi_type(399), arg3) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = context__get_supported_image_formats(x0, x1, x2, x3); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(497));
}
#else
#  define _cffi_f_context__get_supported_image_formats _cffi_d_context__get_supported_image_formats
#endif

static error * _cffi_d_create_buffer(struct clbase * * x0, struct clbase * x1, uint64_t x2, size_t x3, void * x4)
{
  return create_buffer(x0, x1, x2, x3, x4);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_create_buffer(PyObject *self, PyObject *args)
{
  struct clbase * * x0;
  struct clbase * x1;
  uint64_t x2;
  size_t x3;
  void * x4;
  Py_ssize_t datasize;
  error * result;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;
  PyObject *arg4;

  if (!PyArg_UnpackTuple(args, "create_buffer", 5, 5, &arg0, &arg1, &arg2, &arg3, &arg4))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(5), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (struct clbase * *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(5), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(24), arg1) < 0)
      return NULL;
  }

  x2 = _cffi_to_c_int(arg2, uint64_t);
  if (x2 == (uint64_t)-1 && PyErr_Occurred())
    return NULL;

  x3 = _cffi_to_c_int(arg3, size_t);
  if (x3 == (size_t)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(102), arg4, (char **)&x4);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x4 = (void *)alloca((size_t)datasize);
    memset((void *)x4, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x4, _cffi_type(102), arg4) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = create_buffer(x0, x1, x2, x3, x4); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(497));
}
#else
#  define _cffi_f_create_buffer _cffi_d_create_buffer
#endif

static error * _cffi_d_create_command_queue(struct clbase * * x0, struct clbase * x1, struct clbase * x2, uint64_t x3)
{
  return create_command_queue(x0, x1, x2, x3);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_create_command_queue(PyObject *self, PyObject *args)
{
  struct clbase * * x0;
  struct clbase * x1;
  struct clbase * x2;
  uint64_t x3;
  Py_ssize_t datasize;
  error * result;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;

  if (!PyArg_UnpackTuple(args, "create_command_queue", 4, 4, &arg0, &arg1, &arg2, &arg3))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(5), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (struct clbase * *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(5), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(24), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(24), arg2) < 0)
      return NULL;
  }

  x3 = _cffi_to_c_int(arg3, uint64_t);
  if (x3 == (uint64_t)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = create_command_queue(x0, x1, x2, x3); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(497));
}
#else
#  define _cffi_f_create_command_queue _cffi_d_create_command_queue
#endif

static error * _cffi_d_create_context(struct clbase * * x0, intptr_t const * x1, uint32_t x2, struct clbase * const * x3)
{
  return create_context(x0, x1, x2, x3);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_create_context(PyObject *self, PyObject *args)
{
  struct clbase * * x0;
  intptr_t const * x1;
  uint32_t x2;
  struct clbase * const * x3;
  Py_ssize_t datasize;
  error * result;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;

  if (!PyArg_UnpackTuple(args, "create_context", 4, 4, &arg0, &arg1, &arg2, &arg3))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(5), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (struct clbase * *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(5), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(6), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (intptr_t const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(6), arg1) < 0)
      return NULL;
  }

  x2 = _cffi_to_c_int(arg2, uint32_t);
  if (x2 == (uint32_t)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg3, (char **)&x3);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x3 = (struct clbase * const *)alloca((size_t)datasize);
    memset((void *)x3, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x3, _cffi_type(8), arg3) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = create_context(x0, x1, x2, x3); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(497));
}
#else
#  define _cffi_f_create_context _cffi_d_create_context
#endif

static error * _cffi_d_create_context_from_type(struct clbase * * x0, intptr_t const * x1, uint64_t x2)
{
  return create_context_from_type(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_create_context_from_type(PyObject *self, PyObject *args)
{
  struct clbase * * x0;
  intptr_t const * x1;
  uint64_t x2;
  Py_ssize_t datasize;
  error * result;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "create_context_from_type", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(5), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (struct clbase * *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(5), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(6), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (intptr_t const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(6), arg1) < 0)
      return NULL;
  }

  x2 = _cffi_to_c_int(arg2, uint64_t);
  if (x2 == (uint64_t)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = create_context_from_type(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(497));
}
#else
#  define _cffi_f_create_context_from_type _cffi_d_create_context_from_type
#endif

static error * _cffi_d_create_image_2d(struct clbase * * x0, struct clbase * x1, uint64_t x2, cl_image_format * x3, size_t x4, size_t x5, size_t x6, void * x7)
{
  return create_image_2d(x0, x1, x2, x3, x4, x5, x6, x7);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_create_image_2d(PyObject *self, PyObject *args)
{
  struct clbase * * x0;
  struct clbase * x1;
  uint64_t x2;
  cl_image_format * x3;
  size_t x4;
  size_t x5;
  size_t x6;
  void * x7;
  Py_ssize_t datasize;
  error * result;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;
  PyObject *arg4;
  PyObject *arg5;
  PyObject *arg6;
  PyObject *arg7;

  if (!PyArg_UnpackTuple(args, "create_image_2d", 8, 8, &arg0, &arg1, &arg2, &arg3, &arg4, &arg5, &arg6, &arg7))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(5), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (struct clbase * *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(5), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(24), arg1) < 0)
      return NULL;
  }

  x2 = _cffi_to_c_int(arg2, uint64_t);
  if (x2 == (uint64_t)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(298), arg3, (char **)&x3);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x3 = (cl_image_format *)alloca((size_t)datasize);
    memset((void *)x3, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x3, _cffi_type(298), arg3) < 0)
      return NULL;
  }

  x4 = _cffi_to_c_int(arg4, size_t);
  if (x4 == (size_t)-1 && PyErr_Occurred())
    return NULL;

  x5 = _cffi_to_c_int(arg5, size_t);
  if (x5 == (size_t)-1 && PyErr_Occurred())
    return NULL;

  x6 = _cffi_to_c_int(arg6, size_t);
  if (x6 == (size_t)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(102), arg7, (char **)&x7);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x7 = (void *)alloca((size_t)datasize);
    memset((void *)x7, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x7, _cffi_type(102), arg7) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = create_image_2d(x0, x1, x2, x3, x4, x5, x6, x7); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(497));
}
#else
#  define _cffi_f_create_image_2d _cffi_d_create_image_2d
#endif

static error * _cffi_d_create_image_3d(struct clbase * * x0, struct clbase * x1, uint64_t x2, cl_image_format * x3, size_t x4, size_t x5, size_t x6, size_t x7, size_t x8, void * x9)
{
  return create_image_3d(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_create_image_3d(PyObject *self, PyObject *args)
{
  struct clbase * * x0;
  struct clbase * x1;
  uint64_t x2;
  cl_image_format * x3;
  size_t x4;
  size_t x5;
  size_t x6;
  size_t x7;
  size_t x8;
  void * x9;
  Py_ssize_t datasize;
  error * result;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;
  PyObject *arg4;
  PyObject *arg5;
  PyObject *arg6;
  PyObject *arg7;
  PyObject *arg8;
  PyObject *arg9;

  if (!PyArg_UnpackTuple(args, "create_image_3d", 10, 10, &arg0, &arg1, &arg2, &arg3, &arg4, &arg5, &arg6, &arg7, &arg8, &arg9))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(5), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (struct clbase * *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(5), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(24), arg1) < 0)
      return NULL;
  }

  x2 = _cffi_to_c_int(arg2, uint64_t);
  if (x2 == (uint64_t)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(298), arg3, (char **)&x3);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x3 = (cl_image_format *)alloca((size_t)datasize);
    memset((void *)x3, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x3, _cffi_type(298), arg3) < 0)
      return NULL;
  }

  x4 = _cffi_to_c_int(arg4, size_t);
  if (x4 == (size_t)-1 && PyErr_Occurred())
    return NULL;

  x5 = _cffi_to_c_int(arg5, size_t);
  if (x5 == (size_t)-1 && PyErr_Occurred())
    return NULL;

  x6 = _cffi_to_c_int(arg6, size_t);
  if (x6 == (size_t)-1 && PyErr_Occurred())
    return NULL;

  x7 = _cffi_to_c_int(arg7, size_t);
  if (x7 == (size_t)-1 && PyErr_Occurred())
    return NULL;

  x8 = _cffi_to_c_int(arg8, size_t);
  if (x8 == (size_t)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(102), arg9, (char **)&x9);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x9 = (void *)alloca((size_t)datasize);
    memset((void *)x9, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x9, _cffi_type(102), arg9) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = create_image_3d(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(497));
}
#else
#  define _cffi_f_create_image_3d _cffi_d_create_image_3d
#endif

static error * _cffi_d_create_image_from_desc(struct clbase * * x0, struct clbase * x1, uint64_t x2, cl_image_format * x3, cl_image_desc * x4, void * x5)
{
  return create_image_from_desc(x0, x1, x2, x3, x4, x5);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_create_image_from_desc(PyObject *self, PyObject *args)
{
  struct clbase * * x0;
  struct clbase * x1;
  uint64_t x2;
  cl_image_format * x3;
  cl_image_desc * x4;
  void * x5;
  Py_ssize_t datasize;
  error * result;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;
  PyObject *arg4;
  PyObject *arg5;

  if (!PyArg_UnpackTuple(args, "create_image_from_desc", 6, 6, &arg0, &arg1, &arg2, &arg3, &arg4, &arg5))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(5), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (struct clbase * *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(5), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(24), arg1) < 0)
      return NULL;
  }

  x2 = _cffi_to_c_int(arg2, uint64_t);
  if (x2 == (uint64_t)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(298), arg3, (char **)&x3);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x3 = (cl_image_format *)alloca((size_t)datasize);
    memset((void *)x3, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x3, _cffi_type(298), arg3) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(299), arg4, (char **)&x4);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x4 = (cl_image_desc *)alloca((size_t)datasize);
    memset((void *)x4, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x4, _cffi_type(299), arg4) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(102), arg5, (char **)&x5);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x5 = (void *)alloca((size_t)datasize);
    memset((void *)x5, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x5, _cffi_type(102), arg5) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = create_image_from_desc(x0, x1, x2, x3, x4, x5); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(497));
}
#else
#  define _cffi_f_create_image_from_desc _cffi_d_create_image_from_desc
#endif

static error * _cffi_d_create_kernel(struct clbase * * x0, struct clbase * x1, char const * x2)
{
  return create_kernel(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_create_kernel(PyObject *self, PyObject *args)
{
  struct clbase * * x0;
  struct clbase * x1;
  char const * x2;
  Py_ssize_t datasize;
  error * result;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "create_kernel", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(5), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (struct clbase * *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(5), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(24), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(56), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (char const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(56), arg2) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = create_kernel(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(497));
}
#else
#  define _cffi_f_create_kernel _cffi_d_create_kernel
#endif

static error * _cffi_d_create_program_with_binary(struct clbase * * x0, struct clbase * x1, uint32_t x2, struct clbase * const * x3, unsigned char const * * x4, size_t * x5)
{
  return create_program_with_binary(x0, x1, x2, x3, x4, x5);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_create_program_with_binary(PyObject *self, PyObject *args)
{
  struct clbase * * x0;
  struct clbase * x1;
  uint32_t x2;
  struct clbase * const * x3;
  unsigned char const * * x4;
  size_t * x5;
  Py_ssize_t datasize;
  error * result;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;
  PyObject *arg4;
  PyObject *arg5;

  if (!PyArg_UnpackTuple(args, "create_program_with_binary", 6, 6, &arg0, &arg1, &arg2, &arg3, &arg4, &arg5))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(5), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (struct clbase * *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(5), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(24), arg1) < 0)
      return NULL;
  }

  x2 = _cffi_to_c_int(arg2, uint32_t);
  if (x2 == (uint32_t)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg3, (char **)&x3);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x3 = (struct clbase * const *)alloca((size_t)datasize);
    memset((void *)x3, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x3, _cffi_type(8), arg3) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(291), arg4, (char **)&x4);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x4 = (unsigned char const * *)alloca((size_t)datasize);
    memset((void *)x4, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x4, _cffi_type(291), arg4) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(31), arg5, (char **)&x5);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x5 = (size_t *)alloca((size_t)datasize);
    memset((void *)x5, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x5, _cffi_type(31), arg5) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = create_program_with_binary(x0, x1, x2, x3, x4, x5); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(497));
}
#else
#  define _cffi_f_create_program_with_binary _cffi_d_create_program_with_binary
#endif

static error * _cffi_d_create_program_with_source(struct clbase * * x0, struct clbase * x1, char const * x2)
{
  return create_program_with_source(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_create_program_with_source(PyObject *self, PyObject *args)
{
  struct clbase * * x0;
  struct clbase * x1;
  char const * x2;
  Py_ssize_t datasize;
  error * result;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "create_program_with_source", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(5), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (struct clbase * *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(5), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(24), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(56), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (char const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(56), arg2) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = create_program_with_source(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(497));
}
#else
#  define _cffi_f_create_program_with_source _cffi_d_create_program_with_source
#endif

static error * _cffi_d_create_sampler(struct clbase * * x0, struct clbase * x1, int x2, uint32_t x3, uint32_t x4)
{
  return create_sampler(x0, x1, x2, x3, x4);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_create_sampler(PyObject *self, PyObject *args)
{
  struct clbase * * x0;
  struct clbase * x1;
  int x2;
  uint32_t x3;
  uint32_t x4;
  Py_ssize_t datasize;
  error * result;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;
  PyObject *arg4;

  if (!PyArg_UnpackTuple(args, "create_sampler", 5, 5, &arg0, &arg1, &arg2, &arg3, &arg4))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(5), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (struct clbase * *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(5), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(24), arg1) < 0)
      return NULL;
  }

  x2 = _cffi_to_c_int(arg2, int);
  if (x2 == (int)-1 && PyErr_Occurred())
    return NULL;

  x3 = _cffi_to_c_int(arg3, uint32_t);
  if (x3 == (uint32_t)-1 && PyErr_Occurred())
    return NULL;

  x4 = _cffi_to_c_int(arg4, uint32_t);
  if (x4 == (uint32_t)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = create_sampler(x0, x1, x2, x3, x4); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(497));
}
#else
#  define _cffi_f_create_sampler _cffi_d_create_sampler
#endif

static error * _cffi_d_create_user_event(struct clbase * * x0, struct clbase * x1)
{
  return create_user_event(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_create_user_event(PyObject *self, PyObject *args)
{
  struct clbase * * x0;
  struct clbase * x1;
  Py_ssize_t datasize;
  error * result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "create_user_event", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(5), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (struct clbase * *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(5), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(24), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = create_user_event(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(497));
}
#else
#  define _cffi_f_create_user_event _cffi_d_create_user_event
#endif

static error * _cffi_d_device__create_sub_devices(struct clbase * x0, struct clbase * * * x1, uint32_t * x2, intptr_t const * x3)
{
  return device__create_sub_devices(x0, x1, x2, x3);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_device__create_sub_devices(PyObject *self, PyObject *args)
{
  struct clbase * x0;
  struct clbase * * * x1;
  uint32_t * x2;
  intptr_t const * x3;
  Py_ssize_t datasize;
  error * result;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;

  if (!PyArg_UnpackTuple(args, "device__create_sub_devices", 4, 4, &arg0, &arg1, &arg2, &arg3))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(24), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (struct clbase * * *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(1), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(2), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (uint32_t *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(2), arg2) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(6), arg3, (char **)&x3);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x3 = (intptr_t const *)alloca((size_t)datasize);
    memset((void *)x3, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x3, _cffi_type(6), arg3) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = device__create_sub_devices(x0, x1, x2, x3); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(497));
}
#else
#  define _cffi_f_device__create_sub_devices _cffi_d_device__create_sub_devices
#endif

static error * _cffi_d_enqueue_barrier(struct clbase * x0)
{
  return enqueue_barrier(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_enqueue_barrier(PyObject *self, PyObject *arg0)
{
  struct clbase * x0;
  Py_ssize_t datasize;
  error * result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(24), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = enqueue_barrier(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(497));
}
#else
#  define _cffi_f_enqueue_barrier _cffi_d_enqueue_barrier
#endif

static error * _cffi_d_enqueue_barrier_with_wait_list(struct clbase * * x0, struct clbase * x1, struct clbase * const * x2, uint32_t x3)
{
  return enqueue_barrier_with_wait_list(x0, x1, x2, x3);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_enqueue_barrier_with_wait_list(PyObject *self, PyObject *args)
{
  struct clbase * * x0;
  struct clbase * x1;
  struct clbase * const * x2;
  uint32_t x3;
  Py_ssize_t datasize;
  error * result;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;

  if (!PyArg_UnpackTuple(args, "enqueue_barrier_with_wait_list", 4, 4, &arg0, &arg1, &arg2, &arg3))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(5), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (struct clbase * *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(5), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(24), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (struct clbase * const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(8), arg2) < 0)
      return NULL;
  }

  x3 = _cffi_to_c_int(arg3, uint32_t);
  if (x3 == (uint32_t)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = enqueue_barrier_with_wait_list(x0, x1, x2, x3); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(497));
}
#else
#  define _cffi_f_enqueue_barrier_with_wait_list _cffi_d_enqueue_barrier_with_wait_list
#endif

static error * _cffi_d_enqueue_copy_buffer(struct clbase * * x0, struct clbase * x1, struct clbase * x2, struct clbase * x3, ptrdiff_t x4, size_t x5, size_t x6, struct clbase * const * x7, uint32_t x8)
{
  return enqueue_copy_buffer(x0, x1, x2, x3, x4, x5, x6, x7, x8);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_enqueue_copy_buffer(PyObject *self, PyObject *args)
{
  struct clbase * * x0;
  struct clbase * x1;
  struct clbase * x2;
  struct clbase * x3;
  ptrdiff_t x4;
  size_t x5;
  size_t x6;
  struct clbase * const * x7;
  uint32_t x8;
  Py_ssize_t datasize;
  error * result;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;
  PyObject *arg4;
  PyObject *arg5;
  PyObject *arg6;
  PyObject *arg7;
  PyObject *arg8;

  if (!PyArg_UnpackTuple(args, "enqueue_copy_buffer", 9, 9, &arg0, &arg1, &arg2, &arg3, &arg4, &arg5, &arg6, &arg7, &arg8))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(5), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (struct clbase * *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(5), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(24), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(24), arg2) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg3, (char **)&x3);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x3 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x3, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x3, _cffi_type(24), arg3) < 0)
      return NULL;
  }

  x4 = _cffi_to_c_int(arg4, ptrdiff_t);
  if (x4 == (ptrdiff_t)-1 && PyErr_Occurred())
    return NULL;

  x5 = _cffi_to_c_int(arg5, size_t);
  if (x5 == (size_t)-1 && PyErr_Occurred())
    return NULL;

  x6 = _cffi_to_c_int(arg6, size_t);
  if (x6 == (size_t)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg7, (char **)&x7);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x7 = (struct clbase * const *)alloca((size_t)datasize);
    memset((void *)x7, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x7, _cffi_type(8), arg7) < 0)
      return NULL;
  }

  x8 = _cffi_to_c_int(arg8, uint32_t);
  if (x8 == (uint32_t)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = enqueue_copy_buffer(x0, x1, x2, x3, x4, x5, x6, x7, x8); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(497));
}
#else
#  define _cffi_f_enqueue_copy_buffer _cffi_d_enqueue_copy_buffer
#endif

static error * _cffi_d_enqueue_copy_buffer_rect(struct clbase * * x0, struct clbase * x1, struct clbase * x2, struct clbase * x3, size_t const * x4, size_t x5, size_t const * x6, size_t x7, size_t const * x8, size_t x9, size_t const * x10, size_t x11, size_t const * x12, size_t x13, struct clbase * const * x14, uint32_t x15)
{
  return enqueue_copy_buffer_rect(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_enqueue_copy_buffer_rect(PyObject *self, PyObject *args)
{
  struct clbase * * x0;
  struct clbase * x1;
  struct clbase * x2;
  struct clbase * x3;
  size_t const * x4;
  size_t x5;
  size_t const * x6;
  size_t x7;
  size_t const * x8;
  size_t x9;
  size_t const * x10;
  size_t x11;
  size_t const * x12;
  size_t x13;
  struct clbase * const * x14;
  uint32_t x15;
  Py_ssize_t datasize;
  error * result;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;
  PyObject *arg4;
  PyObject *arg5;
  PyObject *arg6;
  PyObject *arg7;
  PyObject *arg8;
  PyObject *arg9;
  PyObject *arg10;
  PyObject *arg11;
  PyObject *arg12;
  PyObject *arg13;
  PyObject *arg14;
  PyObject *arg15;

  if (!PyArg_UnpackTuple(args, "enqueue_copy_buffer_rect", 16, 16, &arg0, &arg1, &arg2, &arg3, &arg4, &arg5, &arg6, &arg7, &arg8, &arg9, &arg10, &arg11, &arg12, &arg13, &arg14, &arg15))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(5), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (struct clbase * *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(5), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(24), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(24), arg2) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg3, (char **)&x3);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x3 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x3, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x3, _cffi_type(24), arg3) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(27), arg4, (char **)&x4);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x4 = (size_t const *)alloca((size_t)datasize);
    memset((void *)x4, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x4, _cffi_type(27), arg4) < 0)
      return NULL;
  }

  x5 = _cffi_to_c_int(arg5, size_t);
  if (x5 == (size_t)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(27), arg6, (char **)&x6);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x6 = (size_t const *)alloca((size_t)datasize);
    memset((void *)x6, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x6, _cffi_type(27), arg6) < 0)
      return NULL;
  }

  x7 = _cffi_to_c_int(arg7, size_t);
  if (x7 == (size_t)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(27), arg8, (char **)&x8);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x8 = (size_t const *)alloca((size_t)datasize);
    memset((void *)x8, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x8, _cffi_type(27), arg8) < 0)
      return NULL;
  }

  x9 = _cffi_to_c_int(arg9, size_t);
  if (x9 == (size_t)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(27), arg10, (char **)&x10);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x10 = (size_t const *)alloca((size_t)datasize);
    memset((void *)x10, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x10, _cffi_type(27), arg10) < 0)
      return NULL;
  }

  x11 = _cffi_to_c_int(arg11, size_t);
  if (x11 == (size_t)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(27), arg12, (char **)&x12);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x12 = (size_t const *)alloca((size_t)datasize);
    memset((void *)x12, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x12, _cffi_type(27), arg12) < 0)
      return NULL;
  }

  x13 = _cffi_to_c_int(arg13, size_t);
  if (x13 == (size_t)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg14, (char **)&x14);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x14 = (struct clbase * const *)alloca((size_t)datasize);
    memset((void *)x14, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x14, _cffi_type(8), arg14) < 0)
      return NULL;
  }

  x15 = _cffi_to_c_int(arg15, uint32_t);
  if (x15 == (uint32_t)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = enqueue_copy_buffer_rect(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(497));
}
#else
#  define _cffi_f_enqueue_copy_buffer_rect _cffi_d_enqueue_copy_buffer_rect
#endif

static error * _cffi_d_enqueue_copy_buffer_to_image(struct clbase * * x0, struct clbase * x1, struct clbase * x2, struct clbase * x3, size_t x4, size_t const * x5, size_t x6, size_t const * x7, size_t x8, struct clbase * const * x9, uint32_t x10)
{
  return enqueue_copy_buffer_to_image(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_enqueue_copy_buffer_to_image(PyObject *self, PyObject *args)
{
  struct clbase * * x0;
  struct clbase * x1;
  struct clbase * x2;
  struct clbase * x3;
  size_t x4;
  size_t const * x5;
  size_t x6;
  size_t const * x7;
  size_t x8;
  struct clbase * const * x9;
  uint32_t x10;
  Py_ssize_t datasize;
  error * result;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;
  PyObject *arg4;
  PyObject *arg5;
  PyObject *arg6;
  PyObject *arg7;
  PyObject *arg8;
  PyObject *arg9;
  PyObject *arg10;

  if (!PyArg_UnpackTuple(args, "enqueue_copy_buffer_to_image", 11, 11, &arg0, &arg1, &arg2, &arg3, &arg4, &arg5, &arg6, &arg7, &arg8, &arg9, &arg10))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(5), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (struct clbase * *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(5), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(24), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(24), arg2) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg3, (char **)&x3);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x3 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x3, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x3, _cffi_type(24), arg3) < 0)
      return NULL;
  }

  x4 = _cffi_to_c_int(arg4, size_t);
  if (x4 == (size_t)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(27), arg5, (char **)&x5);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x5 = (size_t const *)alloca((size_t)datasize);
    memset((void *)x5, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x5, _cffi_type(27), arg5) < 0)
      return NULL;
  }

  x6 = _cffi_to_c_int(arg6, size_t);
  if (x6 == (size_t)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(27), arg7, (char **)&x7);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x7 = (size_t const *)alloca((size_t)datasize);
    memset((void *)x7, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x7, _cffi_type(27), arg7) < 0)
      return NULL;
  }

  x8 = _cffi_to_c_int(arg8, size_t);
  if (x8 == (size_t)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg9, (char **)&x9);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x9 = (struct clbase * const *)alloca((size_t)datasize);
    memset((void *)x9, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x9, _cffi_type(8), arg9) < 0)
      return NULL;
  }

  x10 = _cffi_to_c_int(arg10, uint32_t);
  if (x10 == (uint32_t)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = enqueue_copy_buffer_to_image(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(497));
}
#else
#  define _cffi_f_enqueue_copy_buffer_to_image _cffi_d_enqueue_copy_buffer_to_image
#endif

static error * _cffi_d_enqueue_copy_image(struct clbase * * x0, struct clbase * x1, struct clbase * x2, struct clbase * x3, size_t const * x4, size_t x5, size_t const * x6, size_t x7, size_t const * x8, size_t x9, struct clbase * const * x10, uint32_t x11)
{
  return enqueue_copy_image(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_enqueue_copy_image(PyObject *self, PyObject *args)
{
  struct clbase * * x0;
  struct clbase * x1;
  struct clbase * x2;
  struct clbase * x3;
  size_t const * x4;
  size_t x5;
  size_t const * x6;
  size_t x7;
  size_t const * x8;
  size_t x9;
  struct clbase * const * x10;
  uint32_t x11;
  Py_ssize_t datasize;
  error * result;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;
  PyObject *arg4;
  PyObject *arg5;
  PyObject *arg6;
  PyObject *arg7;
  PyObject *arg8;
  PyObject *arg9;
  PyObject *arg10;
  PyObject *arg11;

  if (!PyArg_UnpackTuple(args, "enqueue_copy_image", 12, 12, &arg0, &arg1, &arg2, &arg3, &arg4, &arg5, &arg6, &arg7, &arg8, &arg9, &arg10, &arg11))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(5), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (struct clbase * *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(5), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(24), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(24), arg2) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg3, (char **)&x3);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x3 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x3, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x3, _cffi_type(24), arg3) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(27), arg4, (char **)&x4);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x4 = (size_t const *)alloca((size_t)datasize);
    memset((void *)x4, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x4, _cffi_type(27), arg4) < 0)
      return NULL;
  }

  x5 = _cffi_to_c_int(arg5, size_t);
  if (x5 == (size_t)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(27), arg6, (char **)&x6);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x6 = (size_t const *)alloca((size_t)datasize);
    memset((void *)x6, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x6, _cffi_type(27), arg6) < 0)
      return NULL;
  }

  x7 = _cffi_to_c_int(arg7, size_t);
  if (x7 == (size_t)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(27), arg8, (char **)&x8);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x8 = (size_t const *)alloca((size_t)datasize);
    memset((void *)x8, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x8, _cffi_type(27), arg8) < 0)
      return NULL;
  }

  x9 = _cffi_to_c_int(arg9, size_t);
  if (x9 == (size_t)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg10, (char **)&x10);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x10 = (struct clbase * const *)alloca((size_t)datasize);
    memset((void *)x10, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x10, _cffi_type(8), arg10) < 0)
      return NULL;
  }

  x11 = _cffi_to_c_int(arg11, uint32_t);
  if (x11 == (uint32_t)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = enqueue_copy_image(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(497));
}
#else
#  define _cffi_f_enqueue_copy_image _cffi_d_enqueue_copy_image
#endif

static error * _cffi_d_enqueue_copy_image_to_buffer(struct clbase * * x0, struct clbase * x1, struct clbase * x2, struct clbase * x3, size_t const * x4, size_t x5, size_t const * x6, size_t x7, size_t x8, struct clbase * const * x9, uint32_t x10)
{
  return enqueue_copy_image_to_buffer(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_enqueue_copy_image_to_buffer(PyObject *self, PyObject *args)
{
  struct clbase * * x0;
  struct clbase * x1;
  struct clbase * x2;
  struct clbase * x3;
  size_t const * x4;
  size_t x5;
  size_t const * x6;
  size_t x7;
  size_t x8;
  struct clbase * const * x9;
  uint32_t x10;
  Py_ssize_t datasize;
  error * result;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;
  PyObject *arg4;
  PyObject *arg5;
  PyObject *arg6;
  PyObject *arg7;
  PyObject *arg8;
  PyObject *arg9;
  PyObject *arg10;

  if (!PyArg_UnpackTuple(args, "enqueue_copy_image_to_buffer", 11, 11, &arg0, &arg1, &arg2, &arg3, &arg4, &arg5, &arg6, &arg7, &arg8, &arg9, &arg10))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(5), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (struct clbase * *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(5), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(24), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(24), arg2) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg3, (char **)&x3);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x3 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x3, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x3, _cffi_type(24), arg3) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(27), arg4, (char **)&x4);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x4 = (size_t const *)alloca((size_t)datasize);
    memset((void *)x4, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x4, _cffi_type(27), arg4) < 0)
      return NULL;
  }

  x5 = _cffi_to_c_int(arg5, size_t);
  if (x5 == (size_t)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(27), arg6, (char **)&x6);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x6 = (size_t const *)alloca((size_t)datasize);
    memset((void *)x6, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x6, _cffi_type(27), arg6) < 0)
      return NULL;
  }

  x7 = _cffi_to_c_int(arg7, size_t);
  if (x7 == (size_t)-1 && PyErr_Occurred())
    return NULL;

  x8 = _cffi_to_c_int(arg8, size_t);
  if (x8 == (size_t)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg9, (char **)&x9);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x9 = (struct clbase * const *)alloca((size_t)datasize);
    memset((void *)x9, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x9, _cffi_type(8), arg9) < 0)
      return NULL;
  }

  x10 = _cffi_to_c_int(arg10, uint32_t);
  if (x10 == (uint32_t)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = enqueue_copy_image_to_buffer(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(497));
}
#else
#  define _cffi_f_enqueue_copy_image_to_buffer _cffi_d_enqueue_copy_image_to_buffer
#endif

static error * _cffi_d_enqueue_fill_buffer(struct clbase * * x0, struct clbase * x1, struct clbase * x2, void * x3, size_t x4, size_t x5, size_t x6, struct clbase * const * x7, uint32_t x8)
{
  return enqueue_fill_buffer(x0, x1, x2, x3, x4, x5, x6, x7, x8);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_enqueue_fill_buffer(PyObject *self, PyObject *args)
{
  struct clbase * * x0;
  struct clbase * x1;
  struct clbase * x2;
  void * x3;
  size_t x4;
  size_t x5;
  size_t x6;
  struct clbase * const * x7;
  uint32_t x8;
  Py_ssize_t datasize;
  error * result;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;
  PyObject *arg4;
  PyObject *arg5;
  PyObject *arg6;
  PyObject *arg7;
  PyObject *arg8;

  if (!PyArg_UnpackTuple(args, "enqueue_fill_buffer", 9, 9, &arg0, &arg1, &arg2, &arg3, &arg4, &arg5, &arg6, &arg7, &arg8))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(5), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (struct clbase * *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(5), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(24), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(24), arg2) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(102), arg3, (char **)&x3);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x3 = (void *)alloca((size_t)datasize);
    memset((void *)x3, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x3, _cffi_type(102), arg3) < 0)
      return NULL;
  }

  x4 = _cffi_to_c_int(arg4, size_t);
  if (x4 == (size_t)-1 && PyErr_Occurred())
    return NULL;

  x5 = _cffi_to_c_int(arg5, size_t);
  if (x5 == (size_t)-1 && PyErr_Occurred())
    return NULL;

  x6 = _cffi_to_c_int(arg6, size_t);
  if (x6 == (size_t)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg7, (char **)&x7);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x7 = (struct clbase * const *)alloca((size_t)datasize);
    memset((void *)x7, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x7, _cffi_type(8), arg7) < 0)
      return NULL;
  }

  x8 = _cffi_to_c_int(arg8, uint32_t);
  if (x8 == (uint32_t)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = enqueue_fill_buffer(x0, x1, x2, x3, x4, x5, x6, x7, x8); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(497));
}
#else
#  define _cffi_f_enqueue_fill_buffer _cffi_d_enqueue_fill_buffer
#endif

static error * _cffi_d_enqueue_fill_image(struct clbase * * x0, struct clbase * x1, struct clbase * x2, void const * x3, size_t const * x4, size_t x5, size_t const * x6, size_t x7, struct clbase * const * x8, uint32_t x9)
{
  return enqueue_fill_image(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_enqueue_fill_image(PyObject *self, PyObject *args)
{
  struct clbase * * x0;
  struct clbase * x1;
  struct clbase * x2;
  void const * x3;
  size_t const * x4;
  size_t x5;
  size_t const * x6;
  size_t x7;
  struct clbase * const * x8;
  uint32_t x9;
  Py_ssize_t datasize;
  error * result;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;
  PyObject *arg4;
  PyObject *arg5;
  PyObject *arg6;
  PyObject *arg7;
  PyObject *arg8;
  PyObject *arg9;

  if (!PyArg_UnpackTuple(args, "enqueue_fill_image", 10, 10, &arg0, &arg1, &arg2, &arg3, &arg4, &arg5, &arg6, &arg7, &arg8, &arg9))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(5), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (struct clbase * *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(5), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(24), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(24), arg2) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(118), arg3, (char **)&x3);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x3 = (void const *)alloca((size_t)datasize);
    memset((void *)x3, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x3, _cffi_type(118), arg3) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(27), arg4, (char **)&x4);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x4 = (size_t const *)alloca((size_t)datasize);
    memset((void *)x4, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x4, _cffi_type(27), arg4) < 0)
      return NULL;
  }

  x5 = _cffi_to_c_int(arg5, size_t);
  if (x5 == (size_t)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(27), arg6, (char **)&x6);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x6 = (size_t const *)alloca((size_t)datasize);
    memset((void *)x6, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x6, _cffi_type(27), arg6) < 0)
      return NULL;
  }

  x7 = _cffi_to_c_int(arg7, size_t);
  if (x7 == (size_t)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg8, (char **)&x8);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x8 = (struct clbase * const *)alloca((size_t)datasize);
    memset((void *)x8, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x8, _cffi_type(8), arg8) < 0)
      return NULL;
  }

  x9 = _cffi_to_c_int(arg9, uint32_t);
  if (x9 == (uint32_t)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = enqueue_fill_image(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(497));
}
#else
#  define _cffi_f_enqueue_fill_image _cffi_d_enqueue_fill_image
#endif

static error * _cffi_d_enqueue_map_buffer(struct clbase * * x0, struct clbase * * x1, struct clbase * x2, struct clbase * x3, uint64_t x4, size_t x5, size_t x6, struct clbase * const * x7, uint32_t x8, int x9)
{
  return enqueue_map_buffer(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_enqueue_map_buffer(PyObject *self, PyObject *args)
{
  struct clbase * * x0;
  struct clbase * * x1;
  struct clbase * x2;
  struct clbase * x3;
  uint64_t x4;
  size_t x5;
  size_t x6;
  struct clbase * const * x7;
  uint32_t x8;
  int x9;
  Py_ssize_t datasize;
  error * result;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;
  PyObject *arg4;
  PyObject *arg5;
  PyObject *arg6;
  PyObject *arg7;
  PyObject *arg8;
  PyObject *arg9;

  if (!PyArg_UnpackTuple(args, "enqueue_map_buffer", 10, 10, &arg0, &arg1, &arg2, &arg3, &arg4, &arg5, &arg6, &arg7, &arg8, &arg9))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(5), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (struct clbase * *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(5), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(5), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (struct clbase * *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(5), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(24), arg2) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg3, (char **)&x3);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x3 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x3, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x3, _cffi_type(24), arg3) < 0)
      return NULL;
  }

  x4 = _cffi_to_c_int(arg4, uint64_t);
  if (x4 == (uint64_t)-1 && PyErr_Occurred())
    return NULL;

  x5 = _cffi_to_c_int(arg5, size_t);
  if (x5 == (size_t)-1 && PyErr_Occurred())
    return NULL;

  x6 = _cffi_to_c_int(arg6, size_t);
  if (x6 == (size_t)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg7, (char **)&x7);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x7 = (struct clbase * const *)alloca((size_t)datasize);
    memset((void *)x7, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x7, _cffi_type(8), arg7) < 0)
      return NULL;
  }

  x8 = _cffi_to_c_int(arg8, uint32_t);
  if (x8 == (uint32_t)-1 && PyErr_Occurred())
    return NULL;

  x9 = _cffi_to_c_int(arg9, int);
  if (x9 == (int)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = enqueue_map_buffer(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(497));
}
#else
#  define _cffi_f_enqueue_map_buffer _cffi_d_enqueue_map_buffer
#endif

static error * _cffi_d_enqueue_map_image(struct clbase * * x0, struct clbase * * x1, struct clbase * x2, struct clbase * x3, uint64_t x4, size_t const * x5, size_t x6, size_t const * x7, size_t x8, size_t * x9, size_t * x10, struct clbase * const * x11, uint32_t x12, int x13)
{
  return enqueue_map_image(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_enqueue_map_image(PyObject *self, PyObject *args)
{
  struct clbase * * x0;
  struct clbase * * x1;
  struct clbase * x2;
  struct clbase * x3;
  uint64_t x4;
  size_t const * x5;
  size_t x6;
  size_t const * x7;
  size_t x8;
  size_t * x9;
  size_t * x10;
  struct clbase * const * x11;
  uint32_t x12;
  int x13;
  Py_ssize_t datasize;
  error * result;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;
  PyObject *arg4;
  PyObject *arg5;
  PyObject *arg6;
  PyObject *arg7;
  PyObject *arg8;
  PyObject *arg9;
  PyObject *arg10;
  PyObject *arg11;
  PyObject *arg12;
  PyObject *arg13;

  if (!PyArg_UnpackTuple(args, "enqueue_map_image", 14, 14, &arg0, &arg1, &arg2, &arg3, &arg4, &arg5, &arg6, &arg7, &arg8, &arg9, &arg10, &arg11, &arg12, &arg13))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(5), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (struct clbase * *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(5), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(5), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (struct clbase * *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(5), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(24), arg2) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg3, (char **)&x3);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x3 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x3, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x3, _cffi_type(24), arg3) < 0)
      return NULL;
  }

  x4 = _cffi_to_c_int(arg4, uint64_t);
  if (x4 == (uint64_t)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(27), arg5, (char **)&x5);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x5 = (size_t const *)alloca((size_t)datasize);
    memset((void *)x5, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x5, _cffi_type(27), arg5) < 0)
      return NULL;
  }

  x6 = _cffi_to_c_int(arg6, size_t);
  if (x6 == (size_t)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(27), arg7, (char **)&x7);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x7 = (size_t const *)alloca((size_t)datasize);
    memset((void *)x7, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x7, _cffi_type(27), arg7) < 0)
      return NULL;
  }

  x8 = _cffi_to_c_int(arg8, size_t);
  if (x8 == (size_t)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(31), arg9, (char **)&x9);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x9 = (size_t *)alloca((size_t)datasize);
    memset((void *)x9, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x9, _cffi_type(31), arg9) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(31), arg10, (char **)&x10);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x10 = (size_t *)alloca((size_t)datasize);
    memset((void *)x10, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x10, _cffi_type(31), arg10) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg11, (char **)&x11);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x11 = (struct clbase * const *)alloca((size_t)datasize);
    memset((void *)x11, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x11, _cffi_type(8), arg11) < 0)
      return NULL;
  }

  x12 = _cffi_to_c_int(arg12, uint32_t);
  if (x12 == (uint32_t)-1 && PyErr_Occurred())
    return NULL;

  x13 = _cffi_to_c_int(arg13, int);
  if (x13 == (int)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = enqueue_map_image(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(497));
}
#else
#  define _cffi_f_enqueue_map_image _cffi_d_enqueue_map_image
#endif

static error * _cffi_d_enqueue_marker(struct clbase * * x0, struct clbase * x1)
{
  return enqueue_marker(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_enqueue_marker(PyObject *self, PyObject *args)
{
  struct clbase * * x0;
  struct clbase * x1;
  Py_ssize_t datasize;
  error * result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "enqueue_marker", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(5), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (struct clbase * *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(5), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(24), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = enqueue_marker(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(497));
}
#else
#  define _cffi_f_enqueue_marker _cffi_d_enqueue_marker
#endif

static error * _cffi_d_enqueue_marker_with_wait_list(struct clbase * * x0, struct clbase * x1, struct clbase * const * x2, uint32_t x3)
{
  return enqueue_marker_with_wait_list(x0, x1, x2, x3);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_enqueue_marker_with_wait_list(PyObject *self, PyObject *args)
{
  struct clbase * * x0;
  struct clbase * x1;
  struct clbase * const * x2;
  uint32_t x3;
  Py_ssize_t datasize;
  error * result;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;

  if (!PyArg_UnpackTuple(args, "enqueue_marker_with_wait_list", 4, 4, &arg0, &arg1, &arg2, &arg3))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(5), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (struct clbase * *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(5), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(24), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (struct clbase * const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(8), arg2) < 0)
      return NULL;
  }

  x3 = _cffi_to_c_int(arg3, uint32_t);
  if (x3 == (uint32_t)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = enqueue_marker_with_wait_list(x0, x1, x2, x3); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(497));
}
#else
#  define _cffi_f_enqueue_marker_with_wait_list _cffi_d_enqueue_marker_with_wait_list
#endif

static error * _cffi_d_enqueue_nd_range_kernel(struct clbase * * x0, struct clbase * x1, struct clbase * x2, uint32_t x3, size_t const * x4, size_t const * x5, size_t const * x6, struct clbase * const * x7, uint32_t x8)
{
  return enqueue_nd_range_kernel(x0, x1, x2, x3, x4, x5, x6, x7, x8);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_enqueue_nd_range_kernel(PyObject *self, PyObject *args)
{
  struct clbase * * x0;
  struct clbase * x1;
  struct clbase * x2;
  uint32_t x3;
  size_t const * x4;
  size_t const * x5;
  size_t const * x6;
  struct clbase * const * x7;
  uint32_t x8;
  Py_ssize_t datasize;
  error * result;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;
  PyObject *arg4;
  PyObject *arg5;
  PyObject *arg6;
  PyObject *arg7;
  PyObject *arg8;

  if (!PyArg_UnpackTuple(args, "enqueue_nd_range_kernel", 9, 9, &arg0, &arg1, &arg2, &arg3, &arg4, &arg5, &arg6, &arg7, &arg8))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(5), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (struct clbase * *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(5), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(24), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(24), arg2) < 0)
      return NULL;
  }

  x3 = _cffi_to_c_int(arg3, uint32_t);
  if (x3 == (uint32_t)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(27), arg4, (char **)&x4);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x4 = (size_t const *)alloca((size_t)datasize);
    memset((void *)x4, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x4, _cffi_type(27), arg4) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(27), arg5, (char **)&x5);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x5 = (size_t const *)alloca((size_t)datasize);
    memset((void *)x5, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x5, _cffi_type(27), arg5) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(27), arg6, (char **)&x6);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x6 = (size_t const *)alloca((size_t)datasize);
    memset((void *)x6, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x6, _cffi_type(27), arg6) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg7, (char **)&x7);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x7 = (struct clbase * const *)alloca((size_t)datasize);
    memset((void *)x7, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x7, _cffi_type(8), arg7) < 0)
      return NULL;
  }

  x8 = _cffi_to_c_int(arg8, uint32_t);
  if (x8 == (uint32_t)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = enqueue_nd_range_kernel(x0, x1, x2, x3, x4, x5, x6, x7, x8); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(497));
}
#else
#  define _cffi_f_enqueue_nd_range_kernel _cffi_d_enqueue_nd_range_kernel
#endif

static error * _cffi_d_enqueue_read_buffer(struct clbase * * x0, struct clbase * x1, struct clbase * x2, void * x3, size_t x4, size_t x5, struct clbase * const * x6, uint32_t x7, int x8, void * x9)
{
  return enqueue_read_buffer(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_enqueue_read_buffer(PyObject *self, PyObject *args)
{
  struct clbase * * x0;
  struct clbase * x1;
  struct clbase * x2;
  void * x3;
  size_t x4;
  size_t x5;
  struct clbase * const * x6;
  uint32_t x7;
  int x8;
  void * x9;
  Py_ssize_t datasize;
  error * result;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;
  PyObject *arg4;
  PyObject *arg5;
  PyObject *arg6;
  PyObject *arg7;
  PyObject *arg8;
  PyObject *arg9;

  if (!PyArg_UnpackTuple(args, "enqueue_read_buffer", 10, 10, &arg0, &arg1, &arg2, &arg3, &arg4, &arg5, &arg6, &arg7, &arg8, &arg9))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(5), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (struct clbase * *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(5), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(24), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(24), arg2) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(102), arg3, (char **)&x3);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x3 = (void *)alloca((size_t)datasize);
    memset((void *)x3, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x3, _cffi_type(102), arg3) < 0)
      return NULL;
  }

  x4 = _cffi_to_c_int(arg4, size_t);
  if (x4 == (size_t)-1 && PyErr_Occurred())
    return NULL;

  x5 = _cffi_to_c_int(arg5, size_t);
  if (x5 == (size_t)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg6, (char **)&x6);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x6 = (struct clbase * const *)alloca((size_t)datasize);
    memset((void *)x6, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x6, _cffi_type(8), arg6) < 0)
      return NULL;
  }

  x7 = _cffi_to_c_int(arg7, uint32_t);
  if (x7 == (uint32_t)-1 && PyErr_Occurred())
    return NULL;

  x8 = _cffi_to_c_int(arg8, int);
  if (x8 == (int)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(102), arg9, (char **)&x9);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x9 = (void *)alloca((size_t)datasize);
    memset((void *)x9, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x9, _cffi_type(102), arg9) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = enqueue_read_buffer(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(497));
}
#else
#  define _cffi_f_enqueue_read_buffer _cffi_d_enqueue_read_buffer
#endif

static error * _cffi_d_enqueue_read_buffer_rect(struct clbase * * x0, struct clbase * x1, struct clbase * x2, void * x3, size_t const * x4, size_t x5, size_t const * x6, size_t x7, size_t const * x8, size_t x9, size_t const * x10, size_t x11, size_t const * x12, size_t x13, struct clbase * const * x14, uint32_t x15, int x16, void * x17)
{
  return enqueue_read_buffer_rect(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_enqueue_read_buffer_rect(PyObject *self, PyObject *args)
{
  struct clbase * * x0;
  struct clbase * x1;
  struct clbase * x2;
  void * x3;
  size_t const * x4;
  size_t x5;
  size_t const * x6;
  size_t x7;
  size_t const * x8;
  size_t x9;
  size_t const * x10;
  size_t x11;
  size_t const * x12;
  size_t x13;
  struct clbase * const * x14;
  uint32_t x15;
  int x16;
  void * x17;
  Py_ssize_t datasize;
  error * result;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;
  PyObject *arg4;
  PyObject *arg5;
  PyObject *arg6;
  PyObject *arg7;
  PyObject *arg8;
  PyObject *arg9;
  PyObject *arg10;
  PyObject *arg11;
  PyObject *arg12;
  PyObject *arg13;
  PyObject *arg14;
  PyObject *arg15;
  PyObject *arg16;
  PyObject *arg17;

  if (!PyArg_UnpackTuple(args, "enqueue_read_buffer_rect", 18, 18, &arg0, &arg1, &arg2, &arg3, &arg4, &arg5, &arg6, &arg7, &arg8, &arg9, &arg10, &arg11, &arg12, &arg13, &arg14, &arg15, &arg16, &arg17))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(5), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (struct clbase * *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(5), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(24), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(24), arg2) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(102), arg3, (char **)&x3);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x3 = (void *)alloca((size_t)datasize);
    memset((void *)x3, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x3, _cffi_type(102), arg3) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(27), arg4, (char **)&x4);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x4 = (size_t const *)alloca((size_t)datasize);
    memset((void *)x4, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x4, _cffi_type(27), arg4) < 0)
      return NULL;
  }

  x5 = _cffi_to_c_int(arg5, size_t);
  if (x5 == (size_t)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(27), arg6, (char **)&x6);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x6 = (size_t const *)alloca((size_t)datasize);
    memset((void *)x6, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x6, _cffi_type(27), arg6) < 0)
      return NULL;
  }

  x7 = _cffi_to_c_int(arg7, size_t);
  if (x7 == (size_t)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(27), arg8, (char **)&x8);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x8 = (size_t const *)alloca((size_t)datasize);
    memset((void *)x8, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x8, _cffi_type(27), arg8) < 0)
      return NULL;
  }

  x9 = _cffi_to_c_int(arg9, size_t);
  if (x9 == (size_t)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(27), arg10, (char **)&x10);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x10 = (size_t const *)alloca((size_t)datasize);
    memset((void *)x10, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x10, _cffi_type(27), arg10) < 0)
      return NULL;
  }

  x11 = _cffi_to_c_int(arg11, size_t);
  if (x11 == (size_t)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(27), arg12, (char **)&x12);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x12 = (size_t const *)alloca((size_t)datasize);
    memset((void *)x12, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x12, _cffi_type(27), arg12) < 0)
      return NULL;
  }

  x13 = _cffi_to_c_int(arg13, size_t);
  if (x13 == (size_t)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg14, (char **)&x14);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x14 = (struct clbase * const *)alloca((size_t)datasize);
    memset((void *)x14, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x14, _cffi_type(8), arg14) < 0)
      return NULL;
  }

  x15 = _cffi_to_c_int(arg15, uint32_t);
  if (x15 == (uint32_t)-1 && PyErr_Occurred())
    return NULL;

  x16 = _cffi_to_c_int(arg16, int);
  if (x16 == (int)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(102), arg17, (char **)&x17);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x17 = (void *)alloca((size_t)datasize);
    memset((void *)x17, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x17, _cffi_type(102), arg17) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = enqueue_read_buffer_rect(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(497));
}
#else
#  define _cffi_f_enqueue_read_buffer_rect _cffi_d_enqueue_read_buffer_rect
#endif

static error * _cffi_d_enqueue_read_image(struct clbase * * x0, struct clbase * x1, struct clbase * x2, size_t const * x3, size_t x4, size_t const * x5, size_t x6, void * x7, size_t x8, size_t x9, struct clbase * const * x10, uint32_t x11, int x12, void * x13)
{
  return enqueue_read_image(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_enqueue_read_image(PyObject *self, PyObject *args)
{
  struct clbase * * x0;
  struct clbase * x1;
  struct clbase * x2;
  size_t const * x3;
  size_t x4;
  size_t const * x5;
  size_t x6;
  void * x7;
  size_t x8;
  size_t x9;
  struct clbase * const * x10;
  uint32_t x11;
  int x12;
  void * x13;
  Py_ssize_t datasize;
  error * result;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;
  PyObject *arg4;
  PyObject *arg5;
  PyObject *arg6;
  PyObject *arg7;
  PyObject *arg8;
  PyObject *arg9;
  PyObject *arg10;
  PyObject *arg11;
  PyObject *arg12;
  PyObject *arg13;

  if (!PyArg_UnpackTuple(args, "enqueue_read_image", 14, 14, &arg0, &arg1, &arg2, &arg3, &arg4, &arg5, &arg6, &arg7, &arg8, &arg9, &arg10, &arg11, &arg12, &arg13))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(5), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (struct clbase * *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(5), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(24), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(24), arg2) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(27), arg3, (char **)&x3);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x3 = (size_t const *)alloca((size_t)datasize);
    memset((void *)x3, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x3, _cffi_type(27), arg3) < 0)
      return NULL;
  }

  x4 = _cffi_to_c_int(arg4, size_t);
  if (x4 == (size_t)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(27), arg5, (char **)&x5);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x5 = (size_t const *)alloca((size_t)datasize);
    memset((void *)x5, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x5, _cffi_type(27), arg5) < 0)
      return NULL;
  }

  x6 = _cffi_to_c_int(arg6, size_t);
  if (x6 == (size_t)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(102), arg7, (char **)&x7);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x7 = (void *)alloca((size_t)datasize);
    memset((void *)x7, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x7, _cffi_type(102), arg7) < 0)
      return NULL;
  }

  x8 = _cffi_to_c_int(arg8, size_t);
  if (x8 == (size_t)-1 && PyErr_Occurred())
    return NULL;

  x9 = _cffi_to_c_int(arg9, size_t);
  if (x9 == (size_t)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg10, (char **)&x10);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x10 = (struct clbase * const *)alloca((size_t)datasize);
    memset((void *)x10, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x10, _cffi_type(8), arg10) < 0)
      return NULL;
  }

  x11 = _cffi_to_c_int(arg11, uint32_t);
  if (x11 == (uint32_t)-1 && PyErr_Occurred())
    return NULL;

  x12 = _cffi_to_c_int(arg12, int);
  if (x12 == (int)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(102), arg13, (char **)&x13);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x13 = (void *)alloca((size_t)datasize);
    memset((void *)x13, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x13, _cffi_type(102), arg13) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = enqueue_read_image(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(497));
}
#else
#  define _cffi_f_enqueue_read_image _cffi_d_enqueue_read_image
#endif

static error * _cffi_d_enqueue_task(struct clbase * * x0, struct clbase * x1, struct clbase * x2, struct clbase * const * x3, uint32_t x4)
{
  return enqueue_task(x0, x1, x2, x3, x4);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_enqueue_task(PyObject *self, PyObject *args)
{
  struct clbase * * x0;
  struct clbase * x1;
  struct clbase * x2;
  struct clbase * const * x3;
  uint32_t x4;
  Py_ssize_t datasize;
  error * result;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;
  PyObject *arg4;

  if (!PyArg_UnpackTuple(args, "enqueue_task", 5, 5, &arg0, &arg1, &arg2, &arg3, &arg4))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(5), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (struct clbase * *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(5), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(24), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(24), arg2) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg3, (char **)&x3);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x3 = (struct clbase * const *)alloca((size_t)datasize);
    memset((void *)x3, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x3, _cffi_type(8), arg3) < 0)
      return NULL;
  }

  x4 = _cffi_to_c_int(arg4, uint32_t);
  if (x4 == (uint32_t)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = enqueue_task(x0, x1, x2, x3, x4); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(497));
}
#else
#  define _cffi_f_enqueue_task _cffi_d_enqueue_task
#endif

static error * _cffi_d_enqueue_wait_for_events(struct clbase * x0, struct clbase * const * x1, uint32_t x2)
{
  return enqueue_wait_for_events(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_enqueue_wait_for_events(PyObject *self, PyObject *args)
{
  struct clbase * x0;
  struct clbase * const * x1;
  uint32_t x2;
  Py_ssize_t datasize;
  error * result;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "enqueue_wait_for_events", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(24), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (struct clbase * const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(8), arg1) < 0)
      return NULL;
  }

  x2 = _cffi_to_c_int(arg2, uint32_t);
  if (x2 == (uint32_t)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = enqueue_wait_for_events(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(497));
}
#else
#  define _cffi_f_enqueue_wait_for_events _cffi_d_enqueue_wait_for_events
#endif

static error * _cffi_d_enqueue_write_buffer(struct clbase * * x0, struct clbase * x1, struct clbase * x2, void const * x3, size_t x4, size_t x5, struct clbase * const * x6, uint32_t x7, int x8, void * x9)
{
  return enqueue_write_buffer(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_enqueue_write_buffer(PyObject *self, PyObject *args)
{
  struct clbase * * x0;
  struct clbase * x1;
  struct clbase * x2;
  void const * x3;
  size_t x4;
  size_t x5;
  struct clbase * const * x6;
  uint32_t x7;
  int x8;
  void * x9;
  Py_ssize_t datasize;
  error * result;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;
  PyObject *arg4;
  PyObject *arg5;
  PyObject *arg6;
  PyObject *arg7;
  PyObject *arg8;
  PyObject *arg9;

  if (!PyArg_UnpackTuple(args, "enqueue_write_buffer", 10, 10, &arg0, &arg1, &arg2, &arg3, &arg4, &arg5, &arg6, &arg7, &arg8, &arg9))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(5), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (struct clbase * *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(5), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(24), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(24), arg2) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(118), arg3, (char **)&x3);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x3 = (void const *)alloca((size_t)datasize);
    memset((void *)x3, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x3, _cffi_type(118), arg3) < 0)
      return NULL;
  }

  x4 = _cffi_to_c_int(arg4, size_t);
  if (x4 == (size_t)-1 && PyErr_Occurred())
    return NULL;

  x5 = _cffi_to_c_int(arg5, size_t);
  if (x5 == (size_t)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg6, (char **)&x6);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x6 = (struct clbase * const *)alloca((size_t)datasize);
    memset((void *)x6, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x6, _cffi_type(8), arg6) < 0)
      return NULL;
  }

  x7 = _cffi_to_c_int(arg7, uint32_t);
  if (x7 == (uint32_t)-1 && PyErr_Occurred())
    return NULL;

  x8 = _cffi_to_c_int(arg8, int);
  if (x8 == (int)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(102), arg9, (char **)&x9);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x9 = (void *)alloca((size_t)datasize);
    memset((void *)x9, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x9, _cffi_type(102), arg9) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = enqueue_write_buffer(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(497));
}
#else
#  define _cffi_f_enqueue_write_buffer _cffi_d_enqueue_write_buffer
#endif

static error * _cffi_d_enqueue_write_buffer_rect(struct clbase * * x0, struct clbase * x1, struct clbase * x2, void * x3, size_t const * x4, size_t x5, size_t const * x6, size_t x7, size_t const * x8, size_t x9, size_t const * x10, size_t x11, size_t const * x12, size_t x13, struct clbase * const * x14, uint32_t x15, int x16, void * x17)
{
  return enqueue_write_buffer_rect(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_enqueue_write_buffer_rect(PyObject *self, PyObject *args)
{
  struct clbase * * x0;
  struct clbase * x1;
  struct clbase * x2;
  void * x3;
  size_t const * x4;
  size_t x5;
  size_t const * x6;
  size_t x7;
  size_t const * x8;
  size_t x9;
  size_t const * x10;
  size_t x11;
  size_t const * x12;
  size_t x13;
  struct clbase * const * x14;
  uint32_t x15;
  int x16;
  void * x17;
  Py_ssize_t datasize;
  error * result;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;
  PyObject *arg4;
  PyObject *arg5;
  PyObject *arg6;
  PyObject *arg7;
  PyObject *arg8;
  PyObject *arg9;
  PyObject *arg10;
  PyObject *arg11;
  PyObject *arg12;
  PyObject *arg13;
  PyObject *arg14;
  PyObject *arg15;
  PyObject *arg16;
  PyObject *arg17;

  if (!PyArg_UnpackTuple(args, "enqueue_write_buffer_rect", 18, 18, &arg0, &arg1, &arg2, &arg3, &arg4, &arg5, &arg6, &arg7, &arg8, &arg9, &arg10, &arg11, &arg12, &arg13, &arg14, &arg15, &arg16, &arg17))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(5), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (struct clbase * *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(5), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(24), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(24), arg2) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(102), arg3, (char **)&x3);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x3 = (void *)alloca((size_t)datasize);
    memset((void *)x3, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x3, _cffi_type(102), arg3) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(27), arg4, (char **)&x4);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x4 = (size_t const *)alloca((size_t)datasize);
    memset((void *)x4, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x4, _cffi_type(27), arg4) < 0)
      return NULL;
  }

  x5 = _cffi_to_c_int(arg5, size_t);
  if (x5 == (size_t)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(27), arg6, (char **)&x6);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x6 = (size_t const *)alloca((size_t)datasize);
    memset((void *)x6, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x6, _cffi_type(27), arg6) < 0)
      return NULL;
  }

  x7 = _cffi_to_c_int(arg7, size_t);
  if (x7 == (size_t)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(27), arg8, (char **)&x8);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x8 = (size_t const *)alloca((size_t)datasize);
    memset((void *)x8, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x8, _cffi_type(27), arg8) < 0)
      return NULL;
  }

  x9 = _cffi_to_c_int(arg9, size_t);
  if (x9 == (size_t)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(27), arg10, (char **)&x10);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x10 = (size_t const *)alloca((size_t)datasize);
    memset((void *)x10, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x10, _cffi_type(27), arg10) < 0)
      return NULL;
  }

  x11 = _cffi_to_c_int(arg11, size_t);
  if (x11 == (size_t)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(27), arg12, (char **)&x12);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x12 = (size_t const *)alloca((size_t)datasize);
    memset((void *)x12, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x12, _cffi_type(27), arg12) < 0)
      return NULL;
  }

  x13 = _cffi_to_c_int(arg13, size_t);
  if (x13 == (size_t)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg14, (char **)&x14);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x14 = (struct clbase * const *)alloca((size_t)datasize);
    memset((void *)x14, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x14, _cffi_type(8), arg14) < 0)
      return NULL;
  }

  x15 = _cffi_to_c_int(arg15, uint32_t);
  if (x15 == (uint32_t)-1 && PyErr_Occurred())
    return NULL;

  x16 = _cffi_to_c_int(arg16, int);
  if (x16 == (int)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(102), arg17, (char **)&x17);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x17 = (void *)alloca((size_t)datasize);
    memset((void *)x17, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x17, _cffi_type(102), arg17) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = enqueue_write_buffer_rect(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(497));
}
#else
#  define _cffi_f_enqueue_write_buffer_rect _cffi_d_enqueue_write_buffer_rect
#endif

static error * _cffi_d_enqueue_write_image(struct clbase * * x0, struct clbase * x1, struct clbase * x2, size_t const * x3, size_t x4, size_t const * x5, size_t x6, void const * x7, size_t x8, size_t x9, struct clbase * const * x10, uint32_t x11, int x12, void * x13)
{
  return enqueue_write_image(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_enqueue_write_image(PyObject *self, PyObject *args)
{
  struct clbase * * x0;
  struct clbase * x1;
  struct clbase * x2;
  size_t const * x3;
  size_t x4;
  size_t const * x5;
  size_t x6;
  void const * x7;
  size_t x8;
  size_t x9;
  struct clbase * const * x10;
  uint32_t x11;
  int x12;
  void * x13;
  Py_ssize_t datasize;
  error * result;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;
  PyObject *arg4;
  PyObject *arg5;
  PyObject *arg6;
  PyObject *arg7;
  PyObject *arg8;
  PyObject *arg9;
  PyObject *arg10;
  PyObject *arg11;
  PyObject *arg12;
  PyObject *arg13;

  if (!PyArg_UnpackTuple(args, "enqueue_write_image", 14, 14, &arg0, &arg1, &arg2, &arg3, &arg4, &arg5, &arg6, &arg7, &arg8, &arg9, &arg10, &arg11, &arg12, &arg13))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(5), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (struct clbase * *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(5), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(24), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(24), arg2) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(27), arg3, (char **)&x3);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x3 = (size_t const *)alloca((size_t)datasize);
    memset((void *)x3, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x3, _cffi_type(27), arg3) < 0)
      return NULL;
  }

  x4 = _cffi_to_c_int(arg4, size_t);
  if (x4 == (size_t)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(27), arg5, (char **)&x5);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x5 = (size_t const *)alloca((size_t)datasize);
    memset((void *)x5, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x5, _cffi_type(27), arg5) < 0)
      return NULL;
  }

  x6 = _cffi_to_c_int(arg6, size_t);
  if (x6 == (size_t)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(118), arg7, (char **)&x7);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x7 = (void const *)alloca((size_t)datasize);
    memset((void *)x7, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x7, _cffi_type(118), arg7) < 0)
      return NULL;
  }

  x8 = _cffi_to_c_int(arg8, size_t);
  if (x8 == (size_t)-1 && PyErr_Occurred())
    return NULL;

  x9 = _cffi_to_c_int(arg9, size_t);
  if (x9 == (size_t)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg10, (char **)&x10);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x10 = (struct clbase * const *)alloca((size_t)datasize);
    memset((void *)x10, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x10, _cffi_type(8), arg10) < 0)
      return NULL;
  }

  x11 = _cffi_to_c_int(arg11, uint32_t);
  if (x11 == (uint32_t)-1 && PyErr_Occurred())
    return NULL;

  x12 = _cffi_to_c_int(arg12, int);
  if (x12 == (int)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(102), arg13, (char **)&x13);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x13 = (void *)alloca((size_t)datasize);
    memset((void *)x13, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x13, _cffi_type(102), arg13) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = enqueue_write_image(x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(497));
}
#else
#  define _cffi_f_enqueue_write_image _cffi_d_enqueue_write_image
#endif

static error * _cffi_d_event__get_profiling_info(struct clbase * x0, uint32_t x1, generic_info * x2)
{
  return event__get_profiling_info(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_event__get_profiling_info(PyObject *self, PyObject *args)
{
  struct clbase * x0;
  uint32_t x1;
  generic_info * x2;
  Py_ssize_t datasize;
  error * result;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "event__get_profiling_info", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(24), arg0) < 0)
      return NULL;
  }

  x1 = _cffi_to_c_int(arg1, uint32_t);
  if (x1 == (uint32_t)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(399), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (generic_info *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(399), arg2) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = event__get_profiling_info(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(497));
}
#else
#  define _cffi_f_event__get_profiling_info _cffi_d_event__get_profiling_info
#endif

static error * _cffi_d_event__set_callback(struct clbase * x0, int32_t x1, void * x2)
{
  return event__set_callback(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_event__set_callback(PyObject *self, PyObject *args)
{
  struct clbase * x0;
  int32_t x1;
  void * x2;
  Py_ssize_t datasize;
  error * result;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "event__set_callback", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(24), arg0) < 0)
      return NULL;
  }

  x1 = _cffi_to_c_int(arg1, int32_t);
  if (x1 == (int32_t)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(102), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (void *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(102), arg2) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = event__set_callback(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(497));
}
#else
#  define _cffi_f_event__set_callback _cffi_d_event__set_callback
#endif

static error * _cffi_d_event__wait(struct clbase * x0)
{
  return event__wait(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_event__wait(PyObject *self, PyObject *arg0)
{
  struct clbase * x0;
  Py_ssize_t datasize;
  error * result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(24), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = event__wait(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(497));
}
#else
#  define _cffi_f_event__wait _cffi_d_event__wait
#endif

static void _cffi_d_free_pointer(void * x0)
{
  free_pointer(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_free_pointer(PyObject *self, PyObject *arg0)
{
  void * x0;
  Py_ssize_t datasize;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(102), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (void *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(102), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { free_pointer(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_free_pointer _cffi_d_free_pointer
#endif

static void _cffi_d_free_pointer_array(void * * x0, uint32_t x1)
{
  free_pointer_array(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_free_pointer_array(PyObject *self, PyObject *args)
{
  void * * x0;
  uint32_t x1;
  Py_ssize_t datasize;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "free_pointer_array", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(441), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (void * *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(441), arg0) < 0)
      return NULL;
  }

  x1 = _cffi_to_c_int(arg1, uint32_t);
  if (x1 == (uint32_t)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { free_pointer_array(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_free_pointer_array _cffi_d_free_pointer_array
#endif

static int _cffi_d_get_cl_version(void)
{
  return get_cl_version();
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_get_cl_version(PyObject *self, PyObject *noarg)
{
  int result;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = get_cl_version(); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  (void)noarg; /* unused */
  return _cffi_from_c_int(result, int);
}
#else
#  define _cffi_f_get_cl_version _cffi_d_get_cl_version
#endif

static int _cffi_d_get_debug(void)
{
  return get_debug();
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_get_debug(PyObject *self, PyObject *noarg)
{
  int result;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = get_debug(); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  (void)noarg; /* unused */
  return _cffi_from_c_int(result, int);
}
#else
#  define _cffi_f_get_debug _cffi_d_get_debug
#endif

static error * _cffi_d_get_platforms(struct clbase * * * x0, uint32_t * x1)
{
  return get_platforms(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_get_platforms(PyObject *self, PyObject *args)
{
  struct clbase * * * x0;
  uint32_t * x1;
  Py_ssize_t datasize;
  error * result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "get_platforms", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (struct clbase * * *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(1), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(2), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (uint32_t *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(2), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = get_platforms(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(497));
}
#else
#  define _cffi_f_get_platforms _cffi_d_get_platforms
#endif

static int _cffi_d_have_gl(void)
{
  return have_gl();
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_have_gl(PyObject *self, PyObject *noarg)
{
  int result;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = have_gl(); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  (void)noarg; /* unused */
  return _cffi_from_c_int(result, int);
}
#else
#  define _cffi_f_have_gl _cffi_d_have_gl
#endif

static type_t _cffi_d_image__get_fill_type(struct clbase * x0)
{
  return image__get_fill_type(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_image__get_fill_type(PyObject *self, PyObject *arg0)
{
  struct clbase * x0;
  Py_ssize_t datasize;
  type_t result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(24), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = image__get_fill_type(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_deref((char *)&result, _cffi_type(523));
}
#else
#  define _cffi_f_image__get_fill_type _cffi_d_image__get_fill_type
#endif

static error * _cffi_d_image__get_image_info(struct clbase * x0, uint32_t x1, generic_info * x2)
{
  return image__get_image_info(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_image__get_image_info(PyObject *self, PyObject *args)
{
  struct clbase * x0;
  uint32_t x1;
  generic_info * x2;
  Py_ssize_t datasize;
  error * result;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "image__get_image_info", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(24), arg0) < 0)
      return NULL;
  }

  x1 = _cffi_to_c_int(arg1, uint32_t);
  if (x1 == (uint32_t)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(399), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (generic_info *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(399), arg2) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = image__get_image_info(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(497));
}
#else
#  define _cffi_f_image__get_image_info _cffi_d_image__get_image_info
#endif

static error * _cffi_d_kernel__get_arg_info(struct clbase * x0, uint32_t x1, uint32_t x2, generic_info * x3)
{
  return kernel__get_arg_info(x0, x1, x2, x3);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_kernel__get_arg_info(PyObject *self, PyObject *args)
{
  struct clbase * x0;
  uint32_t x1;
  uint32_t x2;
  generic_info * x3;
  Py_ssize_t datasize;
  error * result;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;

  if (!PyArg_UnpackTuple(args, "kernel__get_arg_info", 4, 4, &arg0, &arg1, &arg2, &arg3))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(24), arg0) < 0)
      return NULL;
  }

  x1 = _cffi_to_c_int(arg1, uint32_t);
  if (x1 == (uint32_t)-1 && PyErr_Occurred())
    return NULL;

  x2 = _cffi_to_c_int(arg2, uint32_t);
  if (x2 == (uint32_t)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(399), arg3, (char **)&x3);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x3 = (generic_info *)alloca((size_t)datasize);
    memset((void *)x3, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x3, _cffi_type(399), arg3) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = kernel__get_arg_info(x0, x1, x2, x3); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(497));
}
#else
#  define _cffi_f_kernel__get_arg_info _cffi_d_kernel__get_arg_info
#endif

static error * _cffi_d_kernel__get_work_group_info(struct clbase * x0, uint32_t x1, struct clbase * x2, generic_info * x3)
{
  return kernel__get_work_group_info(x0, x1, x2, x3);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_kernel__get_work_group_info(PyObject *self, PyObject *args)
{
  struct clbase * x0;
  uint32_t x1;
  struct clbase * x2;
  generic_info * x3;
  Py_ssize_t datasize;
  error * result;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;

  if (!PyArg_UnpackTuple(args, "kernel__get_work_group_info", 4, 4, &arg0, &arg1, &arg2, &arg3))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(24), arg0) < 0)
      return NULL;
  }

  x1 = _cffi_to_c_int(arg1, uint32_t);
  if (x1 == (uint32_t)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(24), arg2) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(399), arg3, (char **)&x3);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x3 = (generic_info *)alloca((size_t)datasize);
    memset((void *)x3, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x3, _cffi_type(399), arg3) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = kernel__get_work_group_info(x0, x1, x2, x3); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(497));
}
#else
#  define _cffi_f_kernel__get_work_group_info _cffi_d_kernel__get_work_group_info
#endif

static error * _cffi_d_kernel__set_arg_buf(struct clbase * x0, uint32_t x1, void const * x2, size_t x3)
{
  return kernel__set_arg_buf(x0, x1, x2, x3);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_kernel__set_arg_buf(PyObject *self, PyObject *args)
{
  struct clbase * x0;
  uint32_t x1;
  void const * x2;
  size_t x3;
  Py_ssize_t datasize;
  error * result;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;

  if (!PyArg_UnpackTuple(args, "kernel__set_arg_buf", 4, 4, &arg0, &arg1, &arg2, &arg3))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(24), arg0) < 0)
      return NULL;
  }

  x1 = _cffi_to_c_int(arg1, uint32_t);
  if (x1 == (uint32_t)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(118), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (void const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(118), arg2) < 0)
      return NULL;
  }

  x3 = _cffi_to_c_int(arg3, size_t);
  if (x3 == (size_t)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = kernel__set_arg_buf(x0, x1, x2, x3); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(497));
}
#else
#  define _cffi_f_kernel__set_arg_buf _cffi_d_kernel__set_arg_buf
#endif

static error * _cffi_d_kernel__set_arg_mem(struct clbase * x0, uint32_t x1, struct clbase * x2)
{
  return kernel__set_arg_mem(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_kernel__set_arg_mem(PyObject *self, PyObject *args)
{
  struct clbase * x0;
  uint32_t x1;
  struct clbase * x2;
  Py_ssize_t datasize;
  error * result;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "kernel__set_arg_mem", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(24), arg0) < 0)
      return NULL;
  }

  x1 = _cffi_to_c_int(arg1, uint32_t);
  if (x1 == (uint32_t)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(24), arg2) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = kernel__set_arg_mem(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(497));
}
#else
#  define _cffi_f_kernel__set_arg_mem _cffi_d_kernel__set_arg_mem
#endif

static error * _cffi_d_kernel__set_arg_null(struct clbase * x0, uint32_t x1)
{
  return kernel__set_arg_null(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_kernel__set_arg_null(PyObject *self, PyObject *args)
{
  struct clbase * x0;
  uint32_t x1;
  Py_ssize_t datasize;
  error * result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "kernel__set_arg_null", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(24), arg0) < 0)
      return NULL;
  }

  x1 = _cffi_to_c_int(arg1, uint32_t);
  if (x1 == (uint32_t)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = kernel__set_arg_null(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(497));
}
#else
#  define _cffi_f_kernel__set_arg_null _cffi_d_kernel__set_arg_null
#endif

static error * _cffi_d_kernel__set_arg_sampler(struct clbase * x0, uint32_t x1, struct clbase * x2)
{
  return kernel__set_arg_sampler(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_kernel__set_arg_sampler(PyObject *self, PyObject *args)
{
  struct clbase * x0;
  uint32_t x1;
  struct clbase * x2;
  Py_ssize_t datasize;
  error * result;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "kernel__set_arg_sampler", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(24), arg0) < 0)
      return NULL;
  }

  x1 = _cffi_to_c_int(arg1, uint32_t);
  if (x1 == (uint32_t)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(24), arg2) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = kernel__set_arg_sampler(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(497));
}
#else
#  define _cffi_f_kernel__set_arg_sampler _cffi_d_kernel__set_arg_sampler
#endif

static void * _cffi_d_memory_map__data(struct clbase * x0)
{
  return memory_map__data(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_memory_map__data(PyObject *self, PyObject *arg0)
{
  struct clbase * x0;
  Py_ssize_t datasize;
  void * result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(24), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = memory_map__data(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(102));
}
#else
#  define _cffi_f_memory_map__data _cffi_d_memory_map__data
#endif

static error * _cffi_d_memory_map__release(struct clbase * x0, struct clbase * x1, struct clbase * const * x2, uint32_t x3, struct clbase * * x4)
{
  return memory_map__release(x0, x1, x2, x3, x4);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_memory_map__release(PyObject *self, PyObject *args)
{
  struct clbase * x0;
  struct clbase * x1;
  struct clbase * const * x2;
  uint32_t x3;
  struct clbase * * x4;
  Py_ssize_t datasize;
  error * result;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;
  PyObject *arg4;

  if (!PyArg_UnpackTuple(args, "memory_map__release", 5, 5, &arg0, &arg1, &arg2, &arg3, &arg4))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(24), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(24), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (struct clbase * const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(8), arg2) < 0)
      return NULL;
  }

  x3 = _cffi_to_c_int(arg3, uint32_t);
  if (x3 == (uint32_t)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(5), arg4, (char **)&x4);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x4 = (struct clbase * *)alloca((size_t)datasize);
    memset((void *)x4, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x4, _cffi_type(5), arg4) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = memory_map__release(x0, x1, x2, x3, x4); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(497));
}
#else
#  define _cffi_f_memory_map__release _cffi_d_memory_map__release
#endif

static error * _cffi_d_memory_object__get_host_array(struct clbase * x0, void * * x1, size_t * x2)
{
  return memory_object__get_host_array(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_memory_object__get_host_array(PyObject *self, PyObject *args)
{
  struct clbase * x0;
  void * * x1;
  size_t * x2;
  Py_ssize_t datasize;
  error * result;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "memory_object__get_host_array", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(24), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(441), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (void * *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(441), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(31), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (size_t *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(31), arg2) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = memory_object__get_host_array(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(497));
}
#else
#  define _cffi_f_memory_object__get_host_array _cffi_d_memory_object__get_host_array
#endif

static error * _cffi_d_memory_object__release(struct clbase * x0)
{
  return memory_object__release(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_memory_object__release(PyObject *self, PyObject *arg0)
{
  struct clbase * x0;
  Py_ssize_t datasize;
  error * result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(24), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = memory_object__release(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(497));
}
#else
#  define _cffi_f_memory_object__release _cffi_d_memory_object__release
#endif

static void * _cffi_d_nanny_event__get_ward(struct clbase * x0)
{
  return nanny_event__get_ward(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_nanny_event__get_ward(PyObject *self, PyObject *arg0)
{
  struct clbase * x0;
  Py_ssize_t datasize;
  void * result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(24), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = nanny_event__get_ward(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(102));
}
#else
#  define _cffi_f_nanny_event__get_ward _cffi_d_nanny_event__get_ward
#endif

static error * _cffi_d_platform__get_devices(struct clbase * x0, struct clbase * * * x1, uint32_t * x2, uint64_t x3)
{
  return platform__get_devices(x0, x1, x2, x3);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_platform__get_devices(PyObject *self, PyObject *args)
{
  struct clbase * x0;
  struct clbase * * * x1;
  uint32_t * x2;
  uint64_t x3;
  Py_ssize_t datasize;
  error * result;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;

  if (!PyArg_UnpackTuple(args, "platform__get_devices", 4, 4, &arg0, &arg1, &arg2, &arg3))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(24), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (struct clbase * * *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(1), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(2), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (uint32_t *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(2), arg2) < 0)
      return NULL;
  }

  x3 = _cffi_to_c_int(arg3, uint64_t);
  if (x3 == (uint64_t)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = platform__get_devices(x0, x1, x2, x3); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(497));
}
#else
#  define _cffi_f_platform__get_devices _cffi_d_platform__get_devices
#endif

static error * _cffi_d_platform__unload_compiler(struct clbase * x0)
{
  return platform__unload_compiler(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_platform__unload_compiler(PyObject *self, PyObject *arg0)
{
  struct clbase * x0;
  Py_ssize_t datasize;
  error * result;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(24), arg0) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = platform__unload_compiler(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(497));
}
#else
#  define _cffi_f_platform__unload_compiler _cffi_d_platform__unload_compiler
#endif

static void _cffi_d_populate_constants(void(* x0)(char const *, char const *, int64_t))
{
  populate_constants(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_populate_constants(PyObject *self, PyObject *arg0)
{
  void(* x0)(char const *, char const *, int64_t);

  x0 = (void(*)(char const *, char const *, int64_t))_cffi_to_c_pointer(arg0, _cffi_type(490));
  if (x0 == (void(*)(char const *, char const *, int64_t))NULL && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { populate_constants(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_populate_constants _cffi_d_populate_constants
#endif

static error * _cffi_d_program__all_kernels(struct clbase * x0, struct clbase * * * x1, uint32_t * x2)
{
  return program__all_kernels(x0, x1, x2);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_program__all_kernels(PyObject *self, PyObject *args)
{
  struct clbase * x0;
  struct clbase * * * x1;
  uint32_t * x2;
  Py_ssize_t datasize;
  error * result;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;

  if (!PyArg_UnpackTuple(args, "program__all_kernels", 3, 3, &arg0, &arg1, &arg2))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(24), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(1), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (struct clbase * * *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(1), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(2), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (uint32_t *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(2), arg2) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = program__all_kernels(x0, x1, x2); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(497));
}
#else
#  define _cffi_f_program__all_kernels _cffi_d_program__all_kernels
#endif

static error * _cffi_d_program__build(struct clbase * x0, char const * x1, uint32_t x2, struct clbase * const * x3)
{
  return program__build(x0, x1, x2, x3);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_program__build(PyObject *self, PyObject *args)
{
  struct clbase * x0;
  char const * x1;
  uint32_t x2;
  struct clbase * const * x3;
  Py_ssize_t datasize;
  error * result;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;

  if (!PyArg_UnpackTuple(args, "program__build", 4, 4, &arg0, &arg1, &arg2, &arg3))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(24), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(56), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (char const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(56), arg1) < 0)
      return NULL;
  }

  x2 = _cffi_to_c_int(arg2, uint32_t);
  if (x2 == (uint32_t)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg3, (char **)&x3);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x3 = (struct clbase * const *)alloca((size_t)datasize);
    memset((void *)x3, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x3, _cffi_type(8), arg3) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = program__build(x0, x1, x2, x3); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(497));
}
#else
#  define _cffi_f_program__build _cffi_d_program__build
#endif

static error * _cffi_d_program__compile(struct clbase * x0, char const * x1, struct clbase * const * x2, size_t x3, struct clbase * const * x4, char const * const * x5, size_t x6)
{
  return program__compile(x0, x1, x2, x3, x4, x5, x6);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_program__compile(PyObject *self, PyObject *args)
{
  struct clbase * x0;
  char const * x1;
  struct clbase * const * x2;
  size_t x3;
  struct clbase * const * x4;
  char const * const * x5;
  size_t x6;
  Py_ssize_t datasize;
  error * result;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;
  PyObject *arg4;
  PyObject *arg5;
  PyObject *arg6;

  if (!PyArg_UnpackTuple(args, "program__compile", 7, 7, &arg0, &arg1, &arg2, &arg3, &arg4, &arg5, &arg6))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(24), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(56), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (char const *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(56), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (struct clbase * const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(8), arg2) < 0)
      return NULL;
  }

  x3 = _cffi_to_c_int(arg3, size_t);
  if (x3 == (size_t)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg4, (char **)&x4);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x4 = (struct clbase * const *)alloca((size_t)datasize);
    memset((void *)x4, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x4, _cffi_type(8), arg4) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(344), arg5, (char **)&x5);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x5 = (char const * const *)alloca((size_t)datasize);
    memset((void *)x5, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x5, _cffi_type(344), arg5) < 0)
      return NULL;
  }

  x6 = _cffi_to_c_int(arg6, size_t);
  if (x6 == (size_t)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = program__compile(x0, x1, x2, x3, x4, x5, x6); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(497));
}
#else
#  define _cffi_f_program__compile _cffi_d_program__compile
#endif

static error * _cffi_d_program__create_with_builtin_kernels(struct clbase * * x0, struct clbase * x1, struct clbase * const * x2, uint32_t x3, char const * x4)
{
  return program__create_with_builtin_kernels(x0, x1, x2, x3, x4);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_program__create_with_builtin_kernels(PyObject *self, PyObject *args)
{
  struct clbase * * x0;
  struct clbase * x1;
  struct clbase * const * x2;
  uint32_t x3;
  char const * x4;
  Py_ssize_t datasize;
  error * result;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;
  PyObject *arg4;

  if (!PyArg_UnpackTuple(args, "program__create_with_builtin_kernels", 5, 5, &arg0, &arg1, &arg2, &arg3, &arg4))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(5), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (struct clbase * *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(5), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(24), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (struct clbase * const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(8), arg2) < 0)
      return NULL;
  }

  x3 = _cffi_to_c_int(arg3, uint32_t);
  if (x3 == (uint32_t)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(56), arg4, (char **)&x4);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x4 = (char const *)alloca((size_t)datasize);
    memset((void *)x4, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x4, _cffi_type(56), arg4) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = program__create_with_builtin_kernels(x0, x1, x2, x3, x4); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(497));
}
#else
#  define _cffi_f_program__create_with_builtin_kernels _cffi_d_program__create_with_builtin_kernels
#endif

static error * _cffi_d_program__get_build_info(struct clbase * x0, struct clbase * x1, uint32_t x2, generic_info * x3)
{
  return program__get_build_info(x0, x1, x2, x3);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_program__get_build_info(PyObject *self, PyObject *args)
{
  struct clbase * x0;
  struct clbase * x1;
  uint32_t x2;
  generic_info * x3;
  Py_ssize_t datasize;
  error * result;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;

  if (!PyArg_UnpackTuple(args, "program__get_build_info", 4, 4, &arg0, &arg1, &arg2, &arg3))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(24), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(24), arg1) < 0)
      return NULL;
  }

  x2 = _cffi_to_c_int(arg2, uint32_t);
  if (x2 == (uint32_t)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(399), arg3, (char **)&x3);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x3 = (generic_info *)alloca((size_t)datasize);
    memset((void *)x3, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x3, _cffi_type(399), arg3) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = program__get_build_info(x0, x1, x2, x3); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(497));
}
#else
#  define _cffi_f_program__get_build_info _cffi_d_program__get_build_info
#endif

static error * _cffi_d_program__kind(struct clbase * x0, int * x1)
{
  return program__kind(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_program__kind(PyObject *self, PyObject *args)
{
  struct clbase * x0;
  int * x1;
  Py_ssize_t datasize;
  error * result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "program__kind", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(24), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(355), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (int *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(355), arg1) < 0)
      return NULL;
  }

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = program__kind(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(497));
}
#else
#  define _cffi_f_program__kind _cffi_d_program__kind
#endif

static error * _cffi_d_program__link(struct clbase * * x0, struct clbase * x1, struct clbase * const * x2, size_t x3, char const * x4, struct clbase * const * x5, size_t x6)
{
  return program__link(x0, x1, x2, x3, x4, x5, x6);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_program__link(PyObject *self, PyObject *args)
{
  struct clbase * * x0;
  struct clbase * x1;
  struct clbase * const * x2;
  size_t x3;
  char const * x4;
  struct clbase * const * x5;
  size_t x6;
  Py_ssize_t datasize;
  error * result;
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;
  PyObject *arg4;
  PyObject *arg5;
  PyObject *arg6;

  if (!PyArg_UnpackTuple(args, "program__link", 7, 7, &arg0, &arg1, &arg2, &arg3, &arg4, &arg5, &arg6))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(5), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (struct clbase * *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(5), arg0) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg1, (char **)&x1);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x1 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x1, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x1, _cffi_type(24), arg1) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg2, (char **)&x2);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x2 = (struct clbase * const *)alloca((size_t)datasize);
    memset((void *)x2, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x2, _cffi_type(8), arg2) < 0)
      return NULL;
  }

  x3 = _cffi_to_c_int(arg3, size_t);
  if (x3 == (size_t)-1 && PyErr_Occurred())
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(56), arg4, (char **)&x4);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x4 = (char const *)alloca((size_t)datasize);
    memset((void *)x4, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x4, _cffi_type(56), arg4) < 0)
      return NULL;
  }

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg5, (char **)&x5);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x5 = (struct clbase * const *)alloca((size_t)datasize);
    memset((void *)x5, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x5, _cffi_type(8), arg5) < 0)
      return NULL;
  }

  x6 = _cffi_to_c_int(arg6, size_t);
  if (x6 == (size_t)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = program__link(x0, x1, x2, x3, x4, x5, x6); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(497));
}
#else
#  define _cffi_f_program__link _cffi_d_program__link
#endif

static void _cffi_d_set_debug(int x0)
{
  set_debug(x0);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_set_debug(PyObject *self, PyObject *arg0)
{
  int x0;

  x0 = _cffi_to_c_int(arg0, int);
  if (x0 == (int)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { set_debug(x0); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_set_debug _cffi_d_set_debug
#endif

static void _cffi_d_set_py_funcs(int(* x0)(void), void *(* x1)(void *), void(* x2)(void *), void(* x3)(void *, int32_t))
{
  set_py_funcs(x0, x1, x2, x3);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_set_py_funcs(PyObject *self, PyObject *args)
{
  int(* x0)(void);
  void *(* x1)(void *);
  void(* x2)(void *);
  void(* x3)(void *, int32_t);
  PyObject *arg0;
  PyObject *arg1;
  PyObject *arg2;
  PyObject *arg3;

  if (!PyArg_UnpackTuple(args, "set_py_funcs", 4, 4, &arg0, &arg1, &arg2, &arg3))
    return NULL;

  x0 = (int(*)(void))_cffi_to_c_pointer(arg0, _cffi_type(467));
  if (x0 == (int(*)(void))NULL && PyErr_Occurred())
    return NULL;

  x1 = (void *(*)(void *))_cffi_to_c_pointer(arg1, _cffi_type(468));
  if (x1 == (void *(*)(void *))NULL && PyErr_Occurred())
    return NULL;

  x2 = (void(*)(void *))_cffi_to_c_pointer(arg2, _cffi_type(469));
  if (x2 == (void(*)(void *))NULL && PyErr_Occurred())
    return NULL;

  x3 = (void(*)(void *, int32_t))_cffi_to_c_pointer(arg3, _cffi_type(470));
  if (x3 == (void(*)(void *, int32_t))NULL && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { set_py_funcs(x0, x1, x2, x3); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  Py_INCREF(Py_None);
  return Py_None;
}
#else
#  define _cffi_f_set_py_funcs _cffi_d_set_py_funcs
#endif

static error * _cffi_d_user_event__set_status(struct clbase * x0, int32_t x1)
{
  return user_event__set_status(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_user_event__set_status(PyObject *self, PyObject *args)
{
  struct clbase * x0;
  int32_t x1;
  Py_ssize_t datasize;
  error * result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "user_event__set_status", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(24), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (struct clbase *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(24), arg0) < 0)
      return NULL;
  }

  x1 = _cffi_to_c_int(arg1, int32_t);
  if (x1 == (int32_t)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = user_event__set_status(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(497));
}
#else
#  define _cffi_f_user_event__set_status _cffi_d_user_event__set_status
#endif

static error * _cffi_d_wait_for_events(struct clbase * const * x0, uint32_t x1)
{
  return wait_for_events(x0, x1);
}
#ifndef PYPY_VERSION
static PyObject *
_cffi_f_wait_for_events(PyObject *self, PyObject *args)
{
  struct clbase * const * x0;
  uint32_t x1;
  Py_ssize_t datasize;
  error * result;
  PyObject *arg0;
  PyObject *arg1;

  if (!PyArg_UnpackTuple(args, "wait_for_events", 2, 2, &arg0, &arg1))
    return NULL;

  datasize = _cffi_prepare_pointer_call_argument(
      _cffi_type(8), arg0, (char **)&x0);
  if (datasize != 0) {
    if (datasize < 0)
      return NULL;
    x0 = (struct clbase * const *)alloca((size_t)datasize);
    memset((void *)x0, 0, (size_t)datasize);
    if (_cffi_convert_array_from_object((char *)x0, _cffi_type(8), arg0) < 0)
      return NULL;
  }

  x1 = _cffi_to_c_int(arg1, uint32_t);
  if (x1 == (uint32_t)-1 && PyErr_Occurred())
    return NULL;

  Py_BEGIN_ALLOW_THREADS
  _cffi_restore_errno();
  { result = wait_for_events(x0, x1); }
  _cffi_save_errno();
  Py_END_ALLOW_THREADS

  (void)self; /* unused */
  return _cffi_from_c_pointer((char *)result, _cffi_type(497));
}
#else
#  define _cffi_f_wait_for_events _cffi_d_wait_for_events
#endif

_CFFI_UNUSED_FN
static void _cffi_checkfld__cl_buffer_region(cl_buffer_region *p)
{
  /* only to generate compile-time warnings or errors */
  (void)p;
  (void)((p->origin) | 0);  /* check that 'cl_buffer_region.origin' is an integer */
  (void)((p->size) | 0);  /* check that 'cl_buffer_region.size' is an integer */
}
struct _cffi_align__cl_buffer_region { char x; cl_buffer_region y; };

_CFFI_UNUSED_FN
static void _cffi_checkfld__cl_image_desc(cl_image_desc *p)
{
  /* only to generate compile-time warnings or errors */
  (void)p;
  (void)((p->image_type) | 0);  /* check that 'cl_image_desc.image_type' is an integer */
  (void)((p->image_width) | 0);  /* check that 'cl_image_desc.image_width' is an integer */
  (void)((p->image_height) | 0);  /* check that 'cl_image_desc.image_height' is an integer */
  (void)((p->image_depth) | 0);  /* check that 'cl_image_desc.image_depth' is an integer */
  (void)((p->image_array_size) | 0);  /* check that 'cl_image_desc.image_array_size' is an integer */
  (void)((p->image_row_pitch) | 0);  /* check that 'cl_image_desc.image_row_pitch' is an integer */
  (void)((p->image_slice_pitch) | 0);  /* check that 'cl_image_desc.image_slice_pitch' is an integer */
  (void)((p->num_mip_levels) | 0);  /* check that 'cl_image_desc.num_mip_levels' is an integer */
  (void)((p->num_samples) | 0);  /* check that 'cl_image_desc.num_samples' is an integer */
  { struct _cl_mem * *tmp = &p->buffer; (void)tmp; }
}
struct _cffi_align__cl_image_desc { char x; cl_image_desc y; };

_CFFI_UNUSED_FN
static void _cffi_checkfld__cl_image_format(cl_image_format *p)
{
  /* only to generate compile-time warnings or errors */
  (void)p;
  (void)((p->image_channel_order) | 0);  /* check that 'cl_image_format.image_channel_order' is an integer */
  (void)((p->image_channel_data_type) | 0);  /* check that 'cl_image_format.image_channel_data_type' is an integer */
}
struct _cffi_align__cl_image_format { char x; cl_image_format y; };

static const struct _cffi_global_s _cffi_globals[] = {
  { "CLASS_BUFFER", (void *)_cffi_const_CLASS_BUFFER, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "CLASS_COMMAND_QUEUE", (void *)_cffi_const_CLASS_COMMAND_QUEUE, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "CLASS_CONTEXT", (void *)_cffi_const_CLASS_CONTEXT, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "CLASS_DEVICE", (void *)_cffi_const_CLASS_DEVICE, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "CLASS_EVENT", (void *)_cffi_const_CLASS_EVENT, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "CLASS_GL_BUFFER", (void *)_cffi_const_CLASS_GL_BUFFER, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "CLASS_GL_RENDERBUFFER", (void *)_cffi_const_CLASS_GL_RENDERBUFFER, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "CLASS_IMAGE", (void *)_cffi_const_CLASS_IMAGE, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "CLASS_KERNEL", (void *)_cffi_const_CLASS_KERNEL, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "CLASS_NONE", (void *)_cffi_const_CLASS_NONE, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "CLASS_PLATFORM", (void *)_cffi_const_CLASS_PLATFORM, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "CLASS_PROGRAM", (void *)_cffi_const_CLASS_PROGRAM, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "CLASS_SAMPLER", (void *)_cffi_const_CLASS_SAMPLER, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "KND_BINARY", (void *)_cffi_const_KND_BINARY, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "KND_SOURCE", (void *)_cffi_const_KND_SOURCE, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "KND_UNKNOWN", (void *)_cffi_const_KND_UNKNOWN, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "TYPE_FLOAT", (void *)_cffi_const_TYPE_FLOAT, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "TYPE_INT", (void *)_cffi_const_TYPE_INT, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "TYPE_UINT", (void *)_cffi_const_TYPE_UINT, _CFFI_OP(_CFFI_OP_ENUM, -1), (void *)0 },
  { "bitlog2", (void *)_cffi_f_bitlog2, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 452), (void *)_cffi_d_bitlog2 },
  { "buffer__get_sub_region", (void *)_cffi_f_buffer__get_sub_region, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 65), (void *)_cffi_d_buffer__get_sub_region },
  { "clobj__delete", (void *)_cffi_f_clobj__delete, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 475), (void *)_cffi_d_clobj__delete },
  { "clobj__from_int_ptr", (void *)_cffi_f_clobj__from_int_ptr, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 15), (void *)_cffi_d_clobj__from_int_ptr },
  { "clobj__get_info", (void *)_cffi_f_clobj__get_info, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 405), (void *)_cffi_d_clobj__get_info },
  { "clobj__int_ptr", (void *)_cffi_f_clobj__int_ptr, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 446), (void *)_cffi_d_clobj__int_ptr },
  { "command_queue__finish", (void *)_cffi_f_command_queue__finish, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 335), (void *)_cffi_d_command_queue__finish },
  { "command_queue__flush", (void *)_cffi_f_command_queue__flush, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 335), (void *)_cffi_d_command_queue__flush },
  { "context__get_supported_image_formats", (void *)_cffi_f_context__get_supported_image_formats, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 433), (void *)_cffi_d_context__get_supported_image_formats },
  { "create_buffer", (void *)_cffi_f_create_buffer, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 324), (void *)_cffi_d_create_buffer },
  { "create_command_queue", (void *)_cffi_f_create_command_queue, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 213), (void *)_cffi_d_create_command_queue },
  { "create_context", (void *)_cffi_f_create_context, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 4), (void *)_cffi_d_create_context },
  { "create_context_from_type", (void *)_cffi_f_create_context_from_type, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 10), (void *)_cffi_d_create_context_from_type },
  { "create_image_2d", (void *)_cffi_f_create_image_2d, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 314), (void *)_cffi_d_create_image_2d },
  { "create_image_3d", (void *)_cffi_f_create_image_3d, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 302), (void *)_cffi_d_create_image_3d },
  { "create_image_from_desc", (void *)_cffi_f_create_image_from_desc, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 294), (void *)_cffi_d_create_image_from_desc },
  { "create_kernel", (void *)_cffi_f_create_kernel, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 53), (void *)_cffi_d_create_kernel },
  { "create_program_with_binary", (void *)_cffi_f_create_program_with_binary, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 286), (void *)_cffi_d_create_program_with_binary },
  { "create_program_with_source", (void *)_cffi_f_create_program_with_source, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 53), (void *)_cffi_d_create_program_with_source },
  { "create_sampler", (void *)_cffi_f_create_sampler, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 58), (void *)_cffi_d_create_sampler },
  { "create_user_event", (void *)_cffi_f_create_user_event, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 49), (void *)_cffi_d_create_user_event },
  { "device__create_sub_devices", (void *)_cffi_f_device__create_sub_devices, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 371), (void *)_cffi_d_device__create_sub_devices },
  { "enqueue_barrier", (void *)_cffi_f_enqueue_barrier, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 335), (void *)_cffi_d_enqueue_barrier },
  { "enqueue_barrier_with_wait_list", (void *)_cffi_f_enqueue_barrier_with_wait_list, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 81), (void *)_cffi_d_enqueue_barrier_with_wait_list },
  { "enqueue_copy_buffer", (void *)_cffi_f_enqueue_copy_buffer, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 133), (void *)_cffi_d_enqueue_copy_buffer },
  { "enqueue_copy_buffer_rect", (void *)_cffi_f_enqueue_copy_buffer_rect, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 144), (void *)_cffi_d_enqueue_copy_buffer_rect },
  { "enqueue_copy_buffer_to_image", (void *)_cffi_f_enqueue_copy_buffer_to_image, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 189), (void *)_cffi_d_enqueue_copy_buffer_to_image },
  { "enqueue_copy_image", (void *)_cffi_f_enqueue_copy_image, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 162), (void *)_cffi_d_enqueue_copy_image },
  { "enqueue_copy_image_to_buffer", (void *)_cffi_f_enqueue_copy_image_to_buffer, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 176), (void *)_cffi_d_enqueue_copy_image_to_buffer },
  { "enqueue_fill_buffer", (void *)_cffi_f_enqueue_fill_buffer, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 239), (void *)_cffi_d_enqueue_fill_buffer },
  { "enqueue_fill_image", (void *)_cffi_f_enqueue_fill_image, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 262), (void *)_cffi_d_enqueue_fill_image },
  { "enqueue_map_buffer", (void *)_cffi_f_enqueue_map_buffer, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 37), (void *)_cffi_d_enqueue_map_buffer },
  { "enqueue_map_image", (void *)_cffi_f_enqueue_map_image, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 21), (void *)_cffi_d_enqueue_map_image },
  { "enqueue_marker", (void *)_cffi_f_enqueue_marker, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 49), (void *)_cffi_d_enqueue_marker },
  { "enqueue_marker_with_wait_list", (void *)_cffi_f_enqueue_marker_with_wait_list, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 81), (void *)_cffi_d_enqueue_marker_with_wait_list },
  { "enqueue_nd_range_kernel", (void *)_cffi_f_enqueue_nd_range_kernel, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 202), (void *)_cffi_d_enqueue_nd_range_kernel },
  { "enqueue_read_buffer", (void *)_cffi_f_enqueue_read_buffer, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 250), (void *)_cffi_d_enqueue_read_buffer },
  { "enqueue_read_buffer_rect", (void *)_cffi_f_enqueue_read_buffer_rect, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 219), (void *)_cffi_d_enqueue_read_buffer_rect },
  { "enqueue_read_image", (void *)_cffi_f_enqueue_read_image, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 94), (void *)_cffi_d_enqueue_read_image },
  { "enqueue_task", (void *)_cffi_f_enqueue_task, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 126), (void *)_cffi_d_enqueue_task },
  { "enqueue_wait_for_events", (void *)_cffi_f_enqueue_wait_for_events, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 383), (void *)_cffi_d_enqueue_wait_for_events },
  { "enqueue_write_buffer", (void *)_cffi_f_enqueue_write_buffer, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 274), (void *)_cffi_d_enqueue_write_buffer },
  { "enqueue_write_buffer_rect", (void *)_cffi_f_enqueue_write_buffer_rect, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 219), (void *)_cffi_d_enqueue_write_buffer_rect },
  { "enqueue_write_image", (void *)_cffi_f_enqueue_write_image, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 110), (void *)_cffi_d_enqueue_write_image },
  { "event__get_profiling_info", (void *)_cffi_f_event__get_profiling_info, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 405), (void *)_cffi_d_event__get_profiling_info },
  { "event__set_callback", (void *)_cffi_f_event__set_callback, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 361), (void *)_cffi_d_event__set_callback },
  { "event__wait", (void *)_cffi_f_event__wait, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 335), (void *)_cffi_d_event__wait },
  { "free_pointer", (void *)_cffi_f_free_pointer, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 482), (void *)_cffi_d_free_pointer },
  { "free_pointer_array", (void *)_cffi_f_free_pointer_array, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 478), (void *)_cffi_d_free_pointer_array },
  { "get_cl_version", (void *)_cffi_f_get_cl_version, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_N, 444), (void *)_cffi_d_get_cl_version },
  { "get_debug", (void *)_cffi_f_get_debug, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_N, 444), (void *)_cffi_d_get_debug },
  { "get_platforms", (void *)_cffi_f_get_platforms, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 0), (void *)_cffi_d_get_platforms },
  { "have_gl", (void *)_cffi_f_have_gl, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_N, 444), (void *)_cffi_d_have_gl },
  { "image__get_fill_type", (void *)_cffi_f_image__get_fill_type, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 449), (void *)_cffi_d_image__get_fill_type },
  { "image__get_image_info", (void *)_cffi_f_image__get_image_info, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 405), (void *)_cffi_d_image__get_image_info },
  { "kernel__get_arg_info", (void *)_cffi_f_kernel__get_arg_info, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 421), (void *)_cffi_d_kernel__get_arg_info },
  { "kernel__get_work_group_info", (void *)_cffi_f_kernel__get_work_group_info, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 415), (void *)_cffi_d_kernel__get_work_group_info },
  { "kernel__set_arg_buf", (void *)_cffi_f_kernel__set_arg_buf, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 427), (void *)_cffi_d_kernel__set_arg_buf },
  { "kernel__set_arg_mem", (void *)_cffi_f_kernel__set_arg_mem, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 410), (void *)_cffi_d_kernel__set_arg_mem },
  { "kernel__set_arg_null", (void *)_cffi_f_kernel__set_arg_null, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 401), (void *)_cffi_d_kernel__set_arg_null },
  { "kernel__set_arg_sampler", (void *)_cffi_f_kernel__set_arg_sampler, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 410), (void *)_cffi_d_kernel__set_arg_sampler },
  { "memory_map__data", (void *)_cffi_f_memory_map__data, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 455), (void *)_cffi_d_memory_map__data },
  { "memory_map__release", (void *)_cffi_f_memory_map__release, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 388), (void *)_cffi_d_memory_map__release },
  { "memory_object__get_host_array", (void *)_cffi_f_memory_object__get_host_array, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 439), (void *)_cffi_d_memory_object__get_host_array },
  { "memory_object__release", (void *)_cffi_f_memory_object__release, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 335), (void *)_cffi_d_memory_object__release },
  { "nanny_event__get_ward", (void *)_cffi_f_nanny_event__get_ward, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 455), (void *)_cffi_d_nanny_event__get_ward },
  { "platform__get_devices", (void *)_cffi_f_platform__get_devices, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 377), (void *)_cffi_d_platform__get_devices },
  { "platform__unload_compiler", (void *)_cffi_f_platform__unload_compiler, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 335), (void *)_cffi_d_platform__unload_compiler },
  { "populate_constants", (void *)_cffi_f_populate_constants, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 489), (void *)_cffi_d_populate_constants },
  { "program__all_kernels", (void *)_cffi_f_program__all_kernels, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 366), (void *)_cffi_d_program__all_kernels },
  { "program__build", (void *)_cffi_f_program__build, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 347), (void *)_cffi_d_program__build },
  { "program__compile", (void *)_cffi_f_program__compile, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 338), (void *)_cffi_d_program__compile },
  { "program__create_with_builtin_kernels", (void *)_cffi_f_program__create_with_builtin_kernels, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 87), (void *)_cffi_d_program__create_with_builtin_kernels },
  { "program__get_build_info", (void *)_cffi_f_program__get_build_info, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 395), (void *)_cffi_d_program__get_build_info },
  { "program__kind", (void *)_cffi_f_program__kind, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 353), (void *)_cffi_d_program__kind },
  { "program__link", (void *)_cffi_f_program__link, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 72), (void *)_cffi_d_program__link },
  { "set_debug", (void *)_cffi_f_set_debug, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_O, 472), (void *)_cffi_d_set_debug },
  { "set_py_funcs", (void *)_cffi_f_set_py_funcs, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 466), (void *)_cffi_d_set_py_funcs },
  { "user_event__set_status", (void *)_cffi_f_user_event__set_status, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 357), (void *)_cffi_d_user_event__set_status },
  { "wait_for_events", (void *)_cffi_f_wait_for_events, _CFFI_OP(_CFFI_OP_CPYTHON_BLTN_V, 331), (void *)_cffi_d_wait_for_events },
};

static const struct _cffi_field_s _cffi_fields[] = {
  { "routine", offsetof(error, routine),
               sizeof(((error *)0)->routine),
               _CFFI_OP(_CFFI_OP_NOOP, 56) },
  { "msg", offsetof(error, msg),
           sizeof(((error *)0)->msg),
           _CFFI_OP(_CFFI_OP_NOOP, 56) },
  { "code", offsetof(error, code),
            sizeof(((error *)0)->code),
            _CFFI_OP(_CFFI_OP_NOOP, 359) },
  { "other", offsetof(error, other),
             sizeof(((error *)0)->other),
             _CFFI_OP(_CFFI_OP_NOOP, 19) },
  { "opaque_class", offsetof(generic_info, opaque_class),
                    sizeof(((generic_info *)0)->opaque_class),
                    _CFFI_OP(_CFFI_OP_NOOP, 18) },
  { "type", offsetof(generic_info, type),
            sizeof(((generic_info *)0)->type),
            _CFFI_OP(_CFFI_OP_NOOP, 56) },
  { "value", offsetof(generic_info, value),
             sizeof(((generic_info *)0)->value),
             _CFFI_OP(_CFFI_OP_NOOP, 102) },
  { "dontfree", offsetof(generic_info, dontfree),
                sizeof(((generic_info *)0)->dontfree),
                _CFFI_OP(_CFFI_OP_NOOP, 19) },
  { "origin", offsetof(cl_buffer_region, origin),
              sizeof(((cl_buffer_region *)0)->origin),
              _CFFI_OP(_CFFI_OP_NOOP, 28) },
  { "size", offsetof(cl_buffer_region, size),
            sizeof(((cl_buffer_region *)0)->size),
            _CFFI_OP(_CFFI_OP_NOOP, 28) },
  { "image_type", offsetof(cl_image_desc, image_type),
                  sizeof(((cl_image_desc *)0)->image_type),
                  _CFFI_OP(_CFFI_OP_NOOP, 7) },
  { "image_width", offsetof(cl_image_desc, image_width),
                   sizeof(((cl_image_desc *)0)->image_width),
                   _CFFI_OP(_CFFI_OP_NOOP, 28) },
  { "image_height", offsetof(cl_image_desc, image_height),
                    sizeof(((cl_image_desc *)0)->image_height),
                    _CFFI_OP(_CFFI_OP_NOOP, 28) },
  { "image_depth", offsetof(cl_image_desc, image_depth),
                   sizeof(((cl_image_desc *)0)->image_depth),
                   _CFFI_OP(_CFFI_OP_NOOP, 28) },
  { "image_array_size", offsetof(cl_image_desc, image_array_size),
                        sizeof(((cl_image_desc *)0)->image_array_size),
                        _CFFI_OP(_CFFI_OP_NOOP, 28) },
  { "image_row_pitch", offsetof(cl_image_desc, image_row_pitch),
                       sizeof(((cl_image_desc *)0)->image_row_pitch),
                       _CFFI_OP(_CFFI_OP_NOOP, 28) },
  { "image_slice_pitch", offsetof(cl_image_desc, image_slice_pitch),
                         sizeof(((cl_image_desc *)0)->image_slice_pitch),
                         _CFFI_OP(_CFFI_OP_NOOP, 28) },
  { "num_mip_levels", offsetof(cl_image_desc, num_mip_levels),
                      sizeof(((cl_image_desc *)0)->num_mip_levels),
                      _CFFI_OP(_CFFI_OP_NOOP, 7) },
  { "num_samples", offsetof(cl_image_desc, num_samples),
                   sizeof(((cl_image_desc *)0)->num_samples),
                   _CFFI_OP(_CFFI_OP_NOOP, 7) },
  { "buffer", offsetof(cl_image_desc, buffer),
              sizeof(((cl_image_desc *)0)->buffer),
              _CFFI_OP(_CFFI_OP_NOOP, 514) },
  { "image_channel_order", offsetof(cl_image_format, image_channel_order),
                           sizeof(((cl_image_format *)0)->image_channel_order),
                           _CFFI_OP(_CFFI_OP_NOOP, 7) },
  { "image_channel_data_type", offsetof(cl_image_format, image_channel_data_type),
                               sizeof(((cl_image_format *)0)->image_channel_data_type),
                               _CFFI_OP(_CFFI_OP_NOOP, 7) },
};

static const struct _cffi_struct_union_s _cffi_struct_unions[] = {
  { "$error", 498, _CFFI_F_CHECK_FIELDS,
    sizeof(error), offsetof(struct _cffi_align_typedef_error, y), 0, 4 },
  { "$generic_info", 500, _CFFI_F_CHECK_FIELDS,
    sizeof(generic_info), offsetof(struct _cffi_align_typedef_generic_info, y), 4, 4 },
  { "_cl_buffer_region", 493, _CFFI_F_CHECK_FIELDS,
    sizeof(cl_buffer_region), offsetof(struct _cffi_align__cl_buffer_region, y), 8, 2 },
  { "_cl_command_queue", 505, _CFFI_F_OPAQUE,
    (size_t)-1, -1, -1, 0 /* opaque */ },
  { "_cl_context", 507, _CFFI_F_OPAQUE,
    (size_t)-1, -1, -1, 0 /* opaque */ },
  { "_cl_device_id", 509, _CFFI_F_OPAQUE,
    (size_t)-1, -1, -1, 0 /* opaque */ },
  { "_cl_event", 511, _CFFI_F_OPAQUE,
    (size_t)-1, -1, -1, 0 /* opaque */ },
  { "_cl_image_desc", 494, _CFFI_F_CHECK_FIELDS,
    sizeof(cl_image_desc), offsetof(struct _cffi_align__cl_image_desc, y), 10, 10 },
  { "_cl_image_format", 495, _CFFI_F_CHECK_FIELDS,
    sizeof(cl_image_format), offsetof(struct _cffi_align__cl_image_format, y), 20, 2 },
  { "_cl_kernel", 513, _CFFI_F_OPAQUE,
    (size_t)-1, -1, -1, 0 /* opaque */ },
  { "_cl_mem", 515, _CFFI_F_OPAQUE,
    (size_t)-1, -1, -1, 0 /* opaque */ },
  { "_cl_platform_id", 517, _CFFI_F_OPAQUE,
    (size_t)-1, -1, -1, 0 /* opaque */ },
  { "_cl_program", 519, _CFFI_F_OPAQUE,
    (size_t)-1, -1, -1, 0 /* opaque */ },
  { "_cl_sampler", 521, _CFFI_F_OPAQUE,
    (size_t)-1, -1, -1, 0 /* opaque */ },
  { "clbase", 522, _CFFI_F_OPAQUE,
    (size_t)-1, -1, -1, 0 /* opaque */ },
};

static const struct _cffi_enum_s _cffi_enums[] = {
  { "$class_t", 18, _cffi_prim_int(sizeof(class_t), ((class_t)-1) <= 0),
    "CLASS_NONE,CLASS_PLATFORM,CLASS_DEVICE,CLASS_KERNEL,CLASS_CONTEXT,CLASS_BUFFER,CLASS_PROGRAM,CLASS_EVENT,CLASS_COMMAND_QUEUE,CLASS_GL_BUFFER,CLASS_GL_RENDERBUFFER,CLASS_IMAGE,CLASS_SAMPLER" },
  { "$program_kind_type", 503, _cffi_prim_int(sizeof(program_kind_type), ((program_kind_type)-1) <= 0),
    "KND_UNKNOWN,KND_SOURCE,KND_BINARY" },
  { "$type_t", 523, _cffi_prim_int(sizeof(type_t), ((type_t)-1) <= 0),
    "TYPE_FLOAT,TYPE_INT,TYPE_UINT" },
};

static const struct _cffi_typename_s _cffi_typenames[] = {
  { "GLenum", 528 },
  { "GLint", 19 },
  { "GLuint", 528 },
  { "cl_addressing_mode", 7 },
  { "cl_bitfield", 13 },
  { "cl_bool", 7 },
  { "cl_buffer_create_type", 7 },
  { "cl_buffer_region", 493 },
  { "cl_build_status", 359 },
  { "cl_channel_order", 7 },
  { "cl_channel_type", 7 },
  { "cl_char", 502 },
  { "cl_command_queue", 504 },
  { "cl_command_queue_info", 7 },
  { "cl_command_queue_properties", 13 },
  { "cl_command_type", 7 },
  { "cl_context", 506 },
  { "cl_context_info", 7 },
  { "cl_context_properties", 17 },
  { "cl_device_affinity_domain", 13 },
  { "cl_device_exec_capabilities", 13 },
  { "cl_device_fp_config", 13 },
  { "cl_device_id", 508 },
  { "cl_device_info", 7 },
  { "cl_device_local_mem_type", 7 },
  { "cl_device_mem_cache_type", 7 },
  { "cl_device_partition_property", 17 },
  { "cl_device_svm_capabilities", 13 },
  { "cl_device_type", 13 },
  { "cl_double", 496 },
  { "cl_event", 510 },
  { "cl_event_info", 7 },
  { "cl_filter_mode", 7 },
  { "cl_float", 499 },
  { "cl_half", 524 },
  { "cl_image_desc", 494 },
  { "cl_image_format", 495 },
  { "cl_image_info", 7 },
  { "cl_int", 359 },
  { "cl_kernel", 512 },
  { "cl_kernel_arg_access_qualifier", 7 },
  { "cl_kernel_arg_address_qualifier", 7 },
  { "cl_kernel_arg_info", 7 },
  { "cl_kernel_arg_type_qualifier", 13 },
  { "cl_kernel_exec_info", 7 },
  { "cl_kernel_info", 7 },
  { "cl_kernel_work_group_info", 7 },
  { "cl_long", 464 },
  { "cl_map_flags", 13 },
  { "cl_mem", 514 },
  { "cl_mem_flags", 13 },
  { "cl_mem_info", 7 },
  { "cl_mem_migration_flags", 13 },
  { "cl_mem_object_type", 7 },
  { "cl_pipe_info", 7 },
  { "cl_pipe_properties", 17 },
  { "cl_platform_id", 516 },
  { "cl_platform_info", 7 },
  { "cl_profiling_info", 7 },
  { "cl_program", 518 },
  { "cl_program_binary_type", 7 },
  { "cl_program_build_info", 7 },
  { "cl_program_info", 7 },
  { "cl_sampler", 520 },
  { "cl_sampler_info", 7 },
  { "cl_sampler_properties", 13 },
  { "cl_short", 501 },
  { "cl_svm_mem_flags", 13 },
  { "cl_uchar", 525 },
  { "cl_uint", 7 },
  { "cl_ulong", 13 },
  { "cl_ushort", 524 },
  { "class_t", 18 },
  { "clobj_t", 24 },
  { "error", 498 },
  { "generic_info", 500 },
  { "program_kind_type", 503 },
  { "type_t", 523 },
};

static const struct _cffi_type_context_s _cffi_type_context = {
  _cffi_types,
  _cffi_globals,
  _cffi_fields,
  _cffi_struct_unions,
  _cffi_enums,
  _cffi_typenames,
  99,  /* num_globals */
  15,  /* num_struct_unions */
  3,  /* num_enums */
  78,  /* num_typenames */
  NULL,  /* no includes */
  530,  /* num_types */
  0,  /* flags */
};

#ifdef PYPY_VERSION
PyMODINIT_FUNC
_cffi_pypyinit__cffi(const void *p[])
{
    p[0] = (const void *)0x2601;
    p[1] = &_cffi_type_context;
}
#  ifdef _MSC_VER
     PyMODINIT_FUNC
#  if PY_MAJOR_VERSION >= 3
     PyInit__cffi(void) { return NULL; }
#  else
     init_cffi(void) { }
#  endif
#  endif
#elif PY_MAJOR_VERSION >= 3
PyMODINIT_FUNC
PyInit__cffi(void)
{
  return _cffi_init("pyopencl._cffi", 0x2601, &_cffi_type_context);
}
#else
PyMODINIT_FUNC
init_cffi(void)
{
  _cffi_init("pyopencl._cffi", 0x2601, &_cffi_type_context);
}
#endif
